//-----------------------------------------------------------
//-----------------------------------------------------------
//
//             System: IQFeed
//       Filename: LaunchingTheFeed.java
//
//-----------------------------------------------------------
//
//            Proprietary Software Product
//
//           Data Transmission Network Inc.
//           9110 West Dodge Road Suite 200
//               Omaha, Nebraska  68114
//
//    Copyright (c) by Data Transmission Network 2008
//                 All Rights Reserved
//
//
//-----------------------------------------------------------
// Module Description: Standard application source file
//         References: None
//           IDE: Netbeans 7.4
//             Author: Tim Walter
//        Modified By: 
//
//-----------------------------------------------------------
// Website for Level1 information: http://www.iqfeed.net/dev/api/docs/Level1viaTCPIP.cfm
//-----------------------------------------------------------
/******************************************************************************
 * DISCLAIMER:  These apps are designed with simplicity in mind and are not 
 * designed for copy and paste development.  You will need to consider 
 * performance enhancements based upon your own needs and implement your
 * solution accordingly. They are a guide to get people started, nothing more.
 ******************************************************************************/
//JAVA imports needed.
import java.io.*;

public class LaunchingTheFeed extends javax.swing.JFrame
{
	//Static variables to be used throughout.
	//These can be modified via registry, information is in the documentation.
	static int IQFEED_ADMIN_PORT_DEFAULT = 9300;
	static int IQFEED_LEVEL1_PORT_DEFAULT = 5009;
	String sCommand = "";
	/**
	 * Creates new form Launching_The_Feed
	 */
	public LaunchingTheFeed()
	{
		initComponents();
                
                Java_Config config = new Java_Config();
                txtProductID.setText(config.product_id);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIQConnectLocation = new javax.swing.JLabel();
        txtIQConnectLocation = new javax.swing.JTextField();
        lblFIELD = new javax.swing.JLabel();
        lblVALUE = new javax.swing.JLabel();
        lblSEND_VIA_CMD_LINE = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbLoginInfo = new javax.swing.JCheckBox();
        cbAutoconnect = new javax.swing.JCheckBox();
        txtProductVersion = new javax.swing.JTextField();
        txtLogin = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        txtProductID = new javax.swing.JTextField();
        cbSendProductID = new javax.swing.JCheckBox();
        cbSendProductVersion = new javax.swing.JCheckBox();
        cbSendLogin = new javax.swing.JCheckBox();
        cbSendPassword = new javax.swing.JCheckBox();
        cbSendSaveLogin = new javax.swing.JCheckBox();
        cbSendAutoconnect = new javax.swing.JCheckBox();
        lblCommandReview = new javax.swing.JLabel();
        LaunchTheFeed = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtUserInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblIQConnectLocation.setText("IQConnect Location");

        txtIQConnectLocation.setText("IQConnect.exe");
        txtIQConnectLocation.setToolTipText("");

        lblFIELD.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblFIELD.setText("FIELD");

        lblVALUE.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblVALUE.setText("VALUE");

        lblSEND_VIA_CMD_LINE.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSEND_VIA_CMD_LINE.setText("SEND VIA CMD LINE?");

        jLabel1.setText("Product ID");

        jLabel2.setText("Product Version");

        jLabel3.setText("Login ID:");

        jLabel4.setText("Password:");

        jLabel5.setText("Save Login Info ?");

        jLabel6.setText("Autoconnect?");

        cbLoginInfo.setText(" Checked = Yes");
        cbLoginInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLoginInfoActionPerformed(evt);
            }
        });

        cbAutoconnect.setText(" Checked = Yes");
        cbAutoconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAutoconnectActionPerformed(evt);
            }
        });

        txtProductVersion.setText("1.0");

        txtProductID.setText("YOUR_PRODUCT_ID");

        cbSendProductID.setSelected(true);
        cbSendProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSendProductIDActionPerformed(evt);
            }
        });

        cbSendProductVersion.setSelected(true);
        cbSendProductVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSendProductVersionActionPerformed(evt);
            }
        });

        cbSendLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSendLoginActionPerformed(evt);
            }
        });

        cbSendPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSendPasswordActionPerformed(evt);
            }
        });

        cbSendSaveLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSendSaveLoginActionPerformed(evt);
            }
        });

        cbSendAutoconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSendAutoconnectActionPerformed(evt);
            }
        });

        lblCommandReview.setText("Command to be processed : ");

        LaunchTheFeed.setText("Launch The Feed");
        LaunchTheFeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaunchTheFeedActionPerformed(evt);
            }
        });

        txtUserInfo.setColumns(20);
        txtUserInfo.setRows(5);
        txtUserInfo.setEnabled(false);
        jScrollPane1.setViewportView(txtUserInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIQConnectLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIQConnectLocation)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCommandReview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbLoginInfo)
                                            .addComponent(cbAutoconnect))
                                        .addGap(177, 177, 177)
                                        .addComponent(jScrollPane1)
                                        .addContainerGap())
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblVALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                                        .addComponent(lblSEND_VIA_CMD_LINE)
                                        .addGap(82, 82, 82))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtProductID, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                                    .addComponent(txtProductVersion)
                                    .addComponent(txtLogin)
                                    .addComponent(txtPassword))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbSendAutoconnect)
                                    .addComponent(cbSendSaveLogin)
                                    .addComponent(cbSendPassword)
                                    .addComponent(cbSendProductID)
                                    .addComponent(cbSendLogin)
                                    .addComponent(cbSendProductVersion))
                                .addGap(0, 199, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(LaunchTheFeed, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtProductVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSendProductVersion))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSendLogin))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSendPassword))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbLoginInfo)
                                .addComponent(cbSendSaveLogin)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cbAutoconnect)
                            .addComponent(cbSendAutoconnect)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIQConnectLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIQConnectLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFIELD)
                            .addComponent(lblVALUE)
                            .addComponent(lblSEND_VIA_CMD_LINE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbSendProductID))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addGap(18, 18, 18)
                .addComponent(lblCommandReview, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LaunchTheFeed)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //-----------------------------------------------------------
    // private void BuildCommand()
    /**
    */
	// @params = A IQFeed_Socket that has a current connection to Level1.
    //  Notes:  Generate the message to be sent to the command line for execution.
    //  Display the built command in the lblCommand object for review.
    //-----------------------------------------------------------		

	private void BuildCommand()
	{
		sCommand = "";
		sCommand += txtIQConnectLocation.getText() + " ";
		if (cbSendProductID.isSelected()  && txtProductID.getText().length() > 0)
		{
			sCommand += "-product " + txtProductID.getText() + " ";
		}

		if (cbSendProductVersion.isSelected() && txtProductVersion.getText().length() > 0)
		{
			sCommand += "-version " + txtProductVersion.getText() + " ";
		}
		if (cbSendLogin.isSelected() && txtLogin.getText().length() > 0)
		{
			sCommand += "-login " + txtLogin.getText() + " ";
		}
		if (cbSendPassword.isSelected() && txtPassword.getText().length() > 0)
		{
			sCommand += "-password " + txtPassword.getText() + " ";
		}
		if (cbLoginInfo.isSelected() && cbSendSaveLogin.isSelected())
		{
			sCommand += "-savelogininfo ";
		}
		if (cbAutoconnect.isSelected() && cbSendAutoconnect.isSelected())
		{
			sCommand += "-autoconnect";
		}
		lblCommandReview.setText(sCommand); 

	}
    //-----------------------------------------------------------
    // private void BuildCommand()
    /**
    */
	// @params = A IQFeed_Socket that has a current connection to Level1.
    //  Notes:  Generate the message to be sent to the command line for execution.
    //  Display the built command in the lblCommand object for review.
    //-----------------------------------------------------------	
    private void LaunchTheFeedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LaunchTheFeedActionPerformed
    {//GEN-HEADEREND:event_LaunchTheFeedActionPerformed
		LaunchingTheFeed CLaunching_The_Feed = new LaunchingTheFeed();
		IQFeed_Socket C_AdminIQFeed_Socket = new IQFeed_Socket();
		//Launch the datafeed
		System.out.printf("Launching IQConnect.\n");
		
		BuildCommand();
		try
		{
			Runtime.getRuntime().exec(sCommand);
		}
		catch (IOException eError)
		{
			eError.printStackTrace();
		}
		System.out.printf("Verifying IQConnect is connected to the server.\n");

		CLaunching_The_Feed.m_VerifyTheDataFeedIsConnected(C_AdminIQFeed_Socket);
		
    }//GEN-LAST:event_LaunchTheFeedActionPerformed
    //-----------------------------------------------------------
    // private void cbSendProductIDActionPerformed(java.awt.event.ActionEvent evt)
    /**
    */
	// @params = Windows event - when a checkbox is toggled, rebuild the command.
    //  Notes:  Rebuild the command, on toggle, and display an alert so we are reminded
	//			there are special considerations to be made.
    //-----------------------------------------------------------	
    private void cbSendProductIDActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSendProductIDActionPerformed
    {//GEN-HEADEREND:event_cbSendProductIDActionPerformed
        if (cbSendProductID.isSelected() == false || cbSendProductVersion.isSelected() == false)
		{
			//If you want to launch the feed without this parameter, it must be 
			//sent via the admin utility before IQConnect will connect to the server.
			txtUserInfo.setText("See the documentation for \"Initialing\nThe Feed\" without using the Product ID\nor Product Version in the command line.");
		}
		else
		{
			txtUserInfo.setText("");
		}
		BuildCommand();
    }//GEN-LAST:event_cbSendProductIDActionPerformed
    //-----------------------------------------------------------
    // private void cbSendProductVersionActionPerformed(java.awt.event.ActionEvent evt)    
    /**
    */
	// @params = Windows event - when a checkbox is toggled, rebuild the command.
    //  Notes:  Rebuild the command, on toggle, and display an alert so we are reminded
	//			there are special considerations to be made.
    //-----------------------------------------------------------	
    private void cbSendProductVersionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSendProductVersionActionPerformed
    {//GEN-HEADEREND:event_cbSendProductVersionActionPerformed
        if (cbSendProductID.isSelected() == false || cbSendProductVersion.isSelected() == false)
		{
			//If you want to launch the feed without this parameter, it must be 
			//sent via the admin utility before IQConnect will connect to the server.
			txtUserInfo.setText("See the documentation for \"Initialing\nThe Feed\" without using the Product ID\nor Product Version in the command line.");
		}
		else
		{
			txtUserInfo.setText("");
		}
		BuildCommand();
    }//GEN-LAST:event_cbSendProductVersionActionPerformed
    //-----------------------------------------------------------
    // private void cbSendLoginActionPerformed(java.awt.event.ActionEvent evt)     
    /**
    */
	// @params = Windows event - when a checkbox is toggled, rebuild the command.
    //  Notes:  Rebuild the command with each toggle.
    //-----------------------------------------------------------
    private void cbSendLoginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSendLoginActionPerformed
    {//GEN-HEADEREND:event_cbSendLoginActionPerformed
		BuildCommand();
    }//GEN-LAST:event_cbSendLoginActionPerformed
    //-----------------------------------------------------------
    // private void cbSendPasswordActionPerformed(java.awt.event.ActionEvent evt)   
    /**
    */
	// @params = Windows event - when a checkbox is toggled, rebuild the command.
    //  Notes:  Rebuild the command with each toggle.
    //-----------------------------------------------------------
    private void cbSendPasswordActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSendPasswordActionPerformed
    {//GEN-HEADEREND:event_cbSendPasswordActionPerformed
        BuildCommand();
    }//GEN-LAST:event_cbSendPasswordActionPerformed
    //-----------------------------------------------------------
    // private void cbSendProductVersionActionPerformed(java.awt.event.ActionEvent evt)    
    /**
    */
	// @params = Windows event - when a checkbox is toggled, rebuild the command.
    //  Notes:  Rebuild the command with each toggle.
    //-----------------------------------------------------------
    private void cbSendSaveLoginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSendSaveLoginActionPerformed
    {//GEN-HEADEREND:event_cbSendSaveLoginActionPerformed
        BuildCommand();
    }//GEN-LAST:event_cbSendSaveLoginActionPerformed
    //-----------------------------------------------------------
    // private void cbSendAutoconnectActionPerformed(java.awt.event.ActionEvent evt)     
    /**
    */
	// @params = Windows event - when a checkbox is toggled, rebuild the command.
    //  Notes:  Rebuild the command with each toggle.
    //-----------------------------------------------------------
    private void cbSendAutoconnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSendAutoconnectActionPerformed
    {//GEN-HEADEREND:event_cbSendAutoconnectActionPerformed
        BuildCommand();
    }//GEN-LAST:event_cbSendAutoconnectActionPerformed

    private void cbLoginInfoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbLoginInfoActionPerformed
    {//GEN-HEADEREND:event_cbLoginInfoActionPerformed
        BuildCommand();
    }//GEN-LAST:event_cbLoginInfoActionPerformed
    //-----------------------------------------------------------
    // private void cbAutoconnectActionPerformed(java.awt.event.ActionEvent evt)    
    /**
    */
	// @params = Windows event - when a checkbox is toggled, rebuild the command.
    //  Notes:  Rebuild the command with each toggle.
    //-----------------------------------------------------------
    private void cbAutoconnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbAutoconnectActionPerformed
    {//GEN-HEADEREND:event_cbAutoconnectActionPerformed
        BuildCommand();
    }//GEN-LAST:event_cbAutoconnectActionPerformed
    
	//-----------------------------------------------------------
    // public static void main(String args[])    
    /**
    */
    //  Notes:  Main execution loop
    //-----------------------------------------------------------
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(LaunchingTheFeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(LaunchingTheFeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(LaunchingTheFeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(LaunchingTheFeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>



		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new LaunchingTheFeed().setVisible(true);
			}
		});
	}
	//-----------------------------------------------------------
    // private void m_VerifyTheDataFeedIsConnected(IQFeed_Socket C_AdminIQFeed_Socket)
    /**
    */
	// @params = A IQFeed_Socket that has a current connection to Admin.
    //  Notes:  Function recieves an Admin IQFeed_Socket,then verifies the 
	//	admin has connected prior to returning the execution back to main.
    //
    //-----------------------------------------------------------
	private void m_VerifyTheDataFeedIsConnected(IQFeed_Socket C_AdminIQFeed_Socket)
	{
		boolean bConnected = false;
		String strAdminLine = "";
		//Connect to socket
		C_AdminIQFeed_Socket.ConnectSocket(IQFEED_ADMIN_PORT_DEFAULT);
		//Initialize the buffers
		C_AdminIQFeed_Socket.CreateBuffers();
		System.out.printf("Feed is Connected? %b\n", C_AdminIQFeed_Socket.isConnected());
		//Loop till connected.
		try
		{
			while ((strAdminLine = C_AdminIQFeed_Socket.brBufferedReader.readLine()) != null && !bConnected)
			{
				System.out.println(strAdminLine);
				if (strAdminLine.indexOf(",Connected,") > -1)
				{
					System.out.println("IQConnect is connected to the server.");
					bConnected = true;
				} else if (strAdminLine.indexOf(",Not Connected,") > -1)
				{
					System.out.println("IQConnect is Not Connected.\r\nSending connect command.");
					C_AdminIQFeed_Socket.brBufferedWriter.write("S,CONNECT\r\n");
					C_AdminIQFeed_Socket.brBufferedWriter.flush();
				}
			}
		} 
		catch (IOException eError)
		{
			System.out.printf("Error working with admin socket.");
			eError.printStackTrace();
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LaunchTheFeed;
    private javax.swing.JCheckBox cbAutoconnect;
    private javax.swing.JCheckBox cbLoginInfo;
    private javax.swing.JCheckBox cbSendAutoconnect;
    private javax.swing.JCheckBox cbSendLogin;
    private javax.swing.JCheckBox cbSendPassword;
    private javax.swing.JCheckBox cbSendProductID;
    private javax.swing.JCheckBox cbSendProductVersion;
    private javax.swing.JCheckBox cbSendSaveLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCommandReview;
    private javax.swing.JLabel lblFIELD;
    private javax.swing.JLabel lblIQConnectLocation;
    private javax.swing.JLabel lblSEND_VIA_CMD_LINE;
    private javax.swing.JLabel lblVALUE;
    private javax.swing.JTextField txtIQConnectLocation;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtProductVersion;
    private javax.swing.JTextArea txtUserInfo;
    // End of variables declaration//GEN-END:variables
}
