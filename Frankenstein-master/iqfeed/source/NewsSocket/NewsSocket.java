//-----------------------------------------------------------
//-----------------------------------------------------------
//
//             System: IQFeed
//       Filename: NewsSocket.java
//
//-----------------------------------------------------------
//
//            Proprietary Software Product
//
//           Data Transmission Network Inc.
//           9110 West Dodge Road Suite 200
//               Omaha, Nebraska  68114
//
//    Copyright (c) by Data Transmission Network 2008
//                 All Rights Reserved
//
//
//-----------------------------------------------------------
// Module Description: This file illustrates the usage of the news API interface.
//         References: None
//           IDE: Netbeans 7.4
//             Author: Tim Walter
//        Modified By: 
//
//-----------------------------------------------------------
// Website for API information: http://www.iqfeed.net/dev/
//-----------------------------------------------------------

/**
 * ****************************************************************************
 * DISCLAIMER: These apps are designed with simplicity in mind and are not
 * designed for copy and paste development. You will need to consider
 * performance enhancements based upon your own needs and implement your
 * solution accordingly. They are a guide to get people started, nothing more.
 * ****************************************************************************
 */
import java.io.*;
import javax.swing.*;
import java.awt.event.*;

//We need XML support to parse the XML news returns. Using SAX parsing for this example.
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class NewsSocket extends javax.swing.JFrame implements ActionListener, WindowListener
{

	//Define variables for use throughout the code
	private int IQFEED_LOOKUP_PORT_DEFAULT = 9100;      //Defaults to 9100, adjustable in the registy.
	//IQFeed_Socket is defined in the common folder, effectively it is a socket with a buffered reader and writer added.
	IQFeed_Socket C_LookupIQFeed_Socket;
	
	/**
	 * Creates new form NewsSocket
	 */
	public NewsSocket()
	{
		super("News Socket");

		initComponents();
		C_LookupIQFeed_Socket = new IQFeed_Socket();

		//Attempt to connect our socket
		System.out.println("Connecting to News Lookup port.");
		// requests a socket connection to localhost on port IQFEED_LOOKUP_PORT_DEFAULT, default = localhost and port 9100
		// Port 9100 is configurable in the registry.  See registry settings in the documentation.
		// If False is returned we are not able to connect display an error and exit. 
		if (!C_LookupIQFeed_Socket.ConnectSocket(IQFEED_LOOKUP_PORT_DEFAULT))
		{
			JOptionPane.showMessageDialog(null, "Did you forget to login first?\nTake a look at the LaunchingTheFeed example app.");
			System.exit(1);
		}

		System.out.println("Connected to News Lookup port.");
		C_LookupIQFeed_Socket.CreateBuffers();

		//Initialize the protocol, this prepares us for commands to come and verifies that our socket is working as intended.
		try
		{
                        Java_Config config = new Java_Config();
			C_LookupIQFeed_Socket.brBufferedWriter.write(String.format("S,SET PROTOCOL,%s\r\n",config.most_recent_protocol));
			RequestNewsConfig();
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			System.out.println("Message Posted, Protocol set.");
		} catch (Exception eError)
		{
			updateCommandLabelError("Error writing to socket.\n%s", eError.toString());
		}

		Lookup_Listener thread = new Lookup_Listener();
		thread.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        bgResultStyle = new javax.swing.ButtonGroup();
        lblDataSentToServer = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        cbSelectRequest = new javax.swing.JComboBox();
        btnSubmit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        rbXML = new javax.swing.JRadioButton();
        rbText = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNewsSource = new javax.swing.JTextField();
        txtStoryID = new javax.swing.JTextField();
        txtLimit = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        txtRequestID = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtSymbol = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDataSentToServer.setText("Message Sent : ");

        txtDisplay.setColumns(20);
        txtDisplay.setRows(5);
        jScrollPane1.setViewportView(txtDisplay);

        cbSelectRequest.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Request News Config", "Request News Headline by Select Type(s)", "Request Headlines by Symbol(s)", "Request Story for Headline", "Request Story be Emailed", "Request Story Counts" }));
        cbSelectRequest.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbSelectRequestActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit Request");
        btnSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSubmitActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        bgResultStyle.add(rbXML);
        rbXML.setSelected(true);
        rbXML.setText("XML");

        bgResultStyle.add(rbText);
        rbText.setText("Text");

        jLabel1.setText("Return Results as:");

        jLabel2.setText("Request Parameters");

        jLabel3.setText("News Source(s):");

        jLabel4.setText("StoryID:");

        jLabel5.setText("Limit (per Source):");

        jLabel6.setText("Symbol(s):");

        jLabel7.setText("Date:");

        jLabel8.setText("Request ID:");

        jLabel9.setText("Email:");

        txtNewsSource.setEnabled(false);

        txtStoryID.setEnabled(false);

        txtLimit.setEnabled(false);

        txtDate.setEnabled(false);

        txtEmail.setEnabled(false);

        txtSymbol.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel4)
                                .addGap(61, 61, 61))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtNewsSource, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtStoryID, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtLimit))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtDate)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(txtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 142, Short.MAX_VALUE))
                            .addComponent(txtEmail))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(rbXML)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbText)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStoryID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewsSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbXML)
                            .addComponent(rbText)
                            .addComponent(txtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        jLabel11.setText("Raw Data from last request to IQFeed:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataSentToServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbSelectRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(128, 128, 128)
                                        .addComponent(btnSubmit))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSelectRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSubmit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDataSentToServer, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//-----------------------------------------------------------
	// void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) 

	/**
	 * @params - Windows Button click event On the click event, determine from
	 * the combo box selection, the appropriate request and process it.
	 */
	//----------------------------------------------------------- 
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSubmitActionPerformed
    {//GEN-HEADEREND:event_btnSubmitActionPerformed
		System.out.println(cbSelectRequest.getSelectedItem());
		switch (cbSelectRequest.getSelectedItem().toString())
		{
			case "Request News Config":
				RequestNewsConfig();
				break;
			case "Request News Headline by Select Type(s)":
				RequestHeadlinesByType();
				break;
			case "Request Headlines by Symbol(s)":
				RequestHeadlinesBySymbol();
				break;
			case "Request Story for Selected Headline":
				RequestStory(false);
				break;
			case "Request Story be emailed":
				RequestStory(true);
				break;
			case "Request Story Counts":
				RequestStoriesCount();
				break;
		}
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void cbSelectRequestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbSelectRequestActionPerformed
    {//GEN-HEADEREND:event_cbSelectRequestActionPerformed
		ToggleAllFields(false);
		cbSelectRequest.setEnabled(true);
		btnSubmit.setEnabled(true);
		rbXML.setEnabled(true);
		rbText.setEnabled(true);
		txtNewsSource.setEnabled(true);
		txtStoryID.setEnabled(true);
		txtLimit.setEnabled(true);
		txtSymbol.setEnabled(true);
		txtDate.setEnabled(true);
		txtEmail.setEnabled(true);
		txtRequestID.setEnabled(true);
		
		System.out.println(cbSelectRequest.getSelectedItem());
		switch (cbSelectRequest.getSelectedIndex())
		{
			case 0:
				txtNewsSource.setEnabled(false);
				txtStoryID.setEnabled(false);
				txtLimit.setEnabled(false);
				txtSymbol.setEnabled(false);
				txtDate.setEnabled(false);
				txtEmail.setEnabled(false);
				break;
			case 1:
				txtStoryID.setEnabled(false);
				txtSymbol.setEnabled(false);
				txtEmail.setEnabled(false);
				break;
			case 2:
				txtStoryID.setEnabled(false);
				txtDate.setEnabled(false);
				txtEmail.setEnabled(false);
				break;
			case 3:
				txtNewsSource.setEnabled(false);
				txtLimit.setEnabled(false);
				txtSymbol.setEnabled(false);
				txtDate.setEnabled(false);
				txtEmail.setEnabled(false);
				break;
			case 4:
				txtStoryID.setEnabled(false);
				txtEmail.setEnabled(false);
				break;
			case 5:
				txtSymbol.setEnabled(false);
				txtDate.setEnabled(false);
				txtEmail.setEnabled(false);
				break;
		}
    }//GEN-LAST:event_cbSelectRequestActionPerformed

//-----------------------------------------------------------
	// void sendMessage(String sCommand) 
	/**
	 * Sends a command to the output stream for processing by the
	 * Lookup_Listener class\thread.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and sLine feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 */
	//-----------------------------------------------------------     
	void sendMessage(String sCommand)
	{
		try
		{
			//Send the message and flush to be sure it is handled right away.
			C_LookupIQFeed_Socket.brBufferedWriter.write(sCommand);
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			//Label will show the actual string sent to the server.
			updateCommandLabelResult(sCommand);
		} catch (IOException eError)
		{
			updateCommandLabelError("Error:" + sCommand, eError.toString());
		}
	}
//-----------------------------------------------------------
//-----------------------------------------------------------
// void updateCommandLabelResult(String sCommand) 

	/**
	 * Displays a message to a user that identifies the full message being sent.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and sLine feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 */
//-----------------------------------------------------------  
	void updateCommandLabelResult(String sCommand)
	{
		lblDataSentToServer.setText("Message Sent: " + sCommand);
	}
//-----------------------------------------------------------
// void updateCommandLabelError(String sCommand, String sError) 

	/**
	 * Displays a message to a user that identifies the error that may have
	 * occured.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and sLine feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 * @param sError, a String passed from the exception object.
	 */
//-----------------------------------------------------------   
	void updateCommandLabelError(String sCommand, String sError)
	{
		String sErrorMessage = String.format("%s \n Error Message: %s", sCommand, sError);
		lblDataSentToServer.setText(sErrorMessage);
	}

	/**
	 * @param args the command sLine arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(NewsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(NewsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(NewsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(NewsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new NewsSocket().setVisible(true);
			}
		});
	}
//-----------------------------------------------------------
// void ToggleAllFields(boolean bEnableStatus)

	/**
	 * Toggles all fields to be enabled or disabled.
	 *
	 * @param bEnableStatue : True = enable form, false = disable form
	 *
	 */
//-----------------------------------------------------------  	
	private void ToggleAllFields(boolean bEnableStatus)
	{
		btnSubmit.setEnabled(bEnableStatus);
		cbSelectRequest.setEnabled(bEnableStatus);
		rbXML.setEnabled(bEnableStatus);
		rbText.setEnabled(bEnableStatus);
		jScrollPane1.setEnabled(bEnableStatus);
		txtNewsSource.setEnabled(bEnableStatus);
		txtStoryID.setEnabled(bEnableStatus);
		txtLimit.setEnabled(bEnableStatus);
		txtSymbol.setEnabled(bEnableStatus);
		txtDate.setEnabled(bEnableStatus);
		txtRequestID.setEnabled(bEnableStatus);
		txtEmail.setEnabled(bEnableStatus);
	}

	private void RequestNewsConfig()
	{
		txtDisplay.setText("");
		// we request the news config to get a list of available news types
		// the command will be in the format:
		// NCG,TEXT/XML,REQUESTID<CR><LF>
		String sCommand = "NCG";

		// check if the user wants XML or Text returned
		if (rbXML.isSelected())
		{
			sCommand += ",x";
		} else
		{
			sCommand += ",t";
		}

		// check for the existance of a requestID
		if (txtRequestID.getText().length() > 0)
		{
			sCommand += "," + txtRequestID.getText();
		}
		// add the <CR><LF> to the end of the request
		sCommand += "\r\n";

		// and we send it to the feed via the socket
		sendMessage(sCommand);
	}

	/// <summary>
	/// Issues a request to IQFeed for a list of headlines associated with a specific news source.
	/// </summary>
	private void RequestHeadlinesByType()
	{
		txtDisplay.setText("");

		// we request news headlines based upon the selected news type.
		// the command format for this request can be found in the NewsViaTCPIP page in the IQFeed SDK documentation.
		// check if the user wants XML or Text returned
		String sTextXML = "x";
		if (rbText.isSelected())
		{
			sTextXML = "t";
		}

		// convert the limit to an integer
		int iLimit = 10;
		if (txtLimit.getText().length() > 0)
		{
			try
			{
				iLimit = Integer.parseInt(txtLimit.getText());
			} catch (Exception IOError)
			{
				JOptionPane.showMessageDialog(null, "Limit must be numeric.  Defaulting to 10.");
			}
		}

		// format the request String
		String sCommand = String.format("NHL,%s,,%s,%s,%s,%s\r\n", txtNewsSource.getText(), sTextXML, iLimit, txtDate.getText(), txtRequestID.getText());

		// and we send it to the feed via the socket
		sendMessage(sCommand);
	}

	/// <summary>
	/// Issues a request to IQFeed for a list of headlines associated with a specific symbol.
	/// </summary>
	private void RequestHeadlinesBySymbol()
	{
		txtDisplay.setText("");

		// we request news stories based upon the selected news headline.
		// the command format for this request can be found in the NewsViaTCPIP page in the IQFeed SDK documentation.
		// check if the user wants XML or Text returned
		String sTextXML = "x";
		if (rbText.isSelected())
		{
			sTextXML = "t";
		}

		// convert the limit to an integer
		int iLimit = 10;
		if (txtLimit.getText().length() > 0)
		{
			try
			{
				iLimit = Integer.parseInt(txtLimit.getText());
			} catch (Exception IOError)
			{
				JOptionPane.showMessageDialog(null, "Limit must be numeric.  Defaulting to 10.");
			}
		}

		// format the request String
		String sCommand = String.format("NHL,%s,%s,%s,%s,,%s\r\n", txtNewsSource.getText(), txtSymbol.getText(), sTextXML, iLimit, txtRequestID.getText());
		sendMessage(sCommand);
	}

	/// <summary>
	/// Issues a request to IQFeed for a Story Text
	/// </summary>
	/// <param name="bEmail"></param>
	private void RequestStory(boolean bEmail)
	{
		txtDisplay.setText("");

		// we request news stories based upon the selected news headline.
		// the command format for this request can be found in the NewsViaTCPIP page in the IQFeed SDK documentation.
		// verify user has a storyID populated
		if (!txtStoryID.getText().equalsIgnoreCase(""))
		{
			// check if user is emailing story or requesting it be delivered via the feed
			String sCommand;
			if (bEmail)
			{
				// send the request
				sCommand = String.format("NSY,%s,e,%s\r\n", txtStoryID.getText(), txtEmail.getText());
			} else
			{
				// check if the user wants XML or Text returned
				String sTextXML = "x";
				if (rbText.isSelected())
				{
					sTextXML = "t";
				}
				// send the request
				sCommand = String.format("NSY,%s,%s,,%s\r\n", txtStoryID.getText(), sTextXML, txtRequestID.getText());
			}

			// and we send it to the feed via the socket
			sendMessage(sCommand);
		} else
		{
			JOptionPane.showMessageDialog(null, "StoryID required to request a story");
		}
	}

	/// <summary>
	/// Issues a request to IQFeed for the number of stories available for a given symbol
	/// </summary>
	private void RequestStoriesCount()
	{
		txtDisplay.setText("");
		// we request news stories based upon the selected news headline.
		// the command format for this request can be found in the NewsViaTCPIP page in the IQFeed SDK documentation.

		// verify a symbol is entered
		if (!txtSymbol.getText().equals(""))
		{
			// check if the user wants XML or Text returned
			String sTextXML = "x";
			if (rbText.isSelected())
			{
				sTextXML = "t";
			}

			// format the request String
			String sCommand = String.format("NSC,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), sTextXML, txtNewsSource.getText(), txtDate.getText(), txtRequestID.getText());

			// and we send it to the feed via the socket
			sendMessage(sCommand);
		} else
		{
			JOptionPane.showMessageDialog(null, "Symbol(s) required to request a story counts by symbol");
		}
	}

        /// <summary>
	/// we call this to notify the .NET Async socket to start listening for data to come in.  It must be called each time after we receive data
	/// </summary>
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgResultStyle;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cbSelectRequest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDataSentToServer;
    private javax.swing.JRadioButton rbText;
    private javax.swing.JRadioButton rbXML;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextArea txtDisplay;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtLimit;
    private javax.swing.JTextField txtNewsSource;
    private javax.swing.JTextField txtRequestID;
    private javax.swing.JTextField txtStoryID;
    private javax.swing.JTextField txtSymbol;
    // End of variables declaration//GEN-END:variables
 /**
	 * ****************************************************************
	 ******************************************************************
	 *****************************************************************
	 */
//-----------------------------------------------------------
// void actionPerformed(ActionEvent e)
// void windowOpened(WindowEvent e)
// void windowClosing(WindowEvent e)
// void windowIconified(WindowEvent e)
// void windowDeiconified(WindowEvent e)
// void windowClosed(WindowEvent e)
// void windowActivated(WindowEvent e)
// void windowActivated(WindowEvent e)        
	/**
	 * These 8 Window's event functions are left effectively blank due to
	 * simplicity, but are required for compilation.
	 */
//-----------------------------------------------------------
// Start of Window's events.
	@Override
	public void actionPerformed(ActionEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void windowOpened(WindowEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void windowClosing(WindowEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void windowClosed(WindowEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void windowIconified(WindowEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void windowDeiconified(WindowEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void windowActivated(WindowEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public void windowDeactivated(WindowEvent e)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}
	public void UpdateNewsConfig(String sXML)
	{
		System.out.println("Config");
		System.out.println(sXML);
	}
	public void UpdateHeadlines(String sXML)
	{
		System.out.println("Headlines");
		System.out.println(sXML);
	}
	public void UpdateResults(String sXML)
	{
		System.out.println("Results");
		System.out.println(sXML);
	}

	//End of window's events
	/**
	 * ****************************************************************
	 ******************************************************************
	 *****************************************************************
	 */
	//Class to execute and listen to replies from the server.
	//I am displaying the data returned in this function for simplicity to the text Window.
	//Considerations for performance will be needed as this will not work for most normal usage.
	class Lookup_Listener extends Thread
	{

		//-----------------------------------------------------------
		// void run()
		/**
		 */
		//  Notes:  Check for data on the socket, process it if it exists by displaying
		//          to the text window.
		//
		//-----------------------------------------------------------
		public void run()
		{

			txtDisplay.setText("");
			String sLine = "";
			try
			{
				while ((sLine = C_LookupIQFeed_Socket.brBufferedReader.readLine()) != null)
				{
					String sXMLMessage = "";
					String sReturnType = "";
					boolean bFeedingXML = false;
					txtDisplay.append(sLine + "\n");
					// make sure we have complete request results before processing
					if (sLine.endsWith("!ENDMSG!,\r\n"))
					{
						switch (sReturnType)
						{
							case "DynamicNewsConf":
								// this is a News Config, used for building the sources tree.
								UpdateNewsConfig(sXMLMessage);
								break;
							case "news_headlines":
								// this is a list of headlines
								UpdateHeadlines(sXMLMessage);
								break;
							case "news_stories":
								// this is a news story
								UpdateResults(sXMLMessage);
								break;
							case "story_counts":
								// this is the count of all stories referencing the given symbol.
								UpdateResults(sXMLMessage);
								break;
						}
					} 
					else if (bFeedingXML == true || sLine.contains("xml"))
					{
						sXMLMessage += sLine;
						if (sLine.contains("DynamicNewsConf"))
						{
							sReturnType = "DynamicNewsConf";
						} else if (sLine.contains("news_headlines"))
						{
							sReturnType = "news_headlines";
						} else if (sLine.contains("news_stories"))
						{
							sReturnType = "news_stories";
						} else if (sLine.contains("story_counts"))
						{
							sReturnType = "story_counts";
						}
					}

				}
			} 
			catch (Exception eError)
			{
				updateCommandLabelError("Unable to read from socket.\n", eError.toString());
			}
		}

		public void UpdateNewsConfig(String sXML)
		{
			System.out.println("Updating Configuration");
			txtDisplay.setText(sXML);
		}

		public void UpdateHeadlines(String sXML)
		{
			System.out.println("Updating Headlines");
			txtDisplay.setText(sXML);
		}

		public void UpdateResults(String sXML)
		{
			System.out.println("Updating Story Count");
			txtDisplay.setText(sXML);
		}
	}
}
