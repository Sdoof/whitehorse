//-----------------------------------------------------------
//-----------------------------------------------------------
//
//             System: IQFeed
//       Filename: OptionChainsSocket.java
//
//-----------------------------------------------------------
//
//            Proprietary Software Product
//
//           Data Transmission Network Inc.
//           9110 West Dodge Road Suite 200
//               Omaha, Nebraska  68114
//
//    Copyright (c) by Data Transmission Network 2008
//                 All Rights Reserved
//
//
//-----------------------------------------------------------
// Module Description: This file illustrates how to return various system calls 
//						that are needed by various processes within the API with
//						regards to the Option Chains Lookup.
//         References: None
//           IDE: Netbeans 7.4
//             Author: Tim Walter
//        Modified By: 
//
//-----------------------------------------------------------
// Website for API information: http://www.iqfeed.net/dev/
//-----------------------------------------------------------
/******************************************************************************
 * DISCLAIMER:  These apps are designed with simplicity in mind and are not 
 * designed for copy and paste development.  You will need to consider 
 * performance enhancements based upon your own needs and implement your
 * solution accordingly. They are a guide to get people started, nothing more.
 ******************************************************************************/

import java.awt.Color;
import java.io.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.Calendar;

public class OptionChainsSocket extends javax.swing.JFrame implements ActionListener, WindowListener
{
    //Define variables for use throughout the code
    private final int IQFEED_LOOKUP_PORT_DEFAULT = 9100;      //Defaults to 9100, adjustable in the registy.
	//IQFeed_Socket is defined in the common folder, effectively it is a socket with a buffered reader and writer added.
    IQFeed_Socket C_LookupIQFeed_Socket;
	/**
	 * Creates new form OptionChainsSocket
	 */
	public OptionChainsSocket()
	{
		super("Option Chains Socket");
		initComponents();
		C_LookupIQFeed_Socket = new IQFeed_Socket();

		//Attempt to connect our socket
		
		System.out.println("Connecting to Symbol Lookup port.");
			// requests a socket connection to localhost on port IQFEED_LOOKUP_PORT_DEFAULT, default = localhost and port 9100
		// Port 9100 is configurable in the registry.  See registry settings in the documentation.
		// If False is returned we are not able to connect display an error and exit. 
		if (!C_LookupIQFeed_Socket.ConnectSocket(IQFEED_LOOKUP_PORT_DEFAULT))
		{
			JOptionPane.showMessageDialog(null, "Did you forget to login first?\nTake a look at the LaunchingTheFeed example app.");
			System.exit(1);
		}

		System.out.println("Connected to Symbol Lookup port.");
		C_LookupIQFeed_Socket.CreateBuffers();

		//Initialize the protocol, this prepares us for commands to come and verifies that our socket is working as intended.
		try
		{
                        Java_Config config = new Java_Config();
			C_LookupIQFeed_Socket.brBufferedWriter.write(String.format("S,SET PROTOCOL,%s\r\n",config.most_recent_protocol));
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			System.out.println("Message Posted, Protocol set.");
		} catch (IOException eError)
		{
			updateCommandLabelError("Error writing to socket.\n%s", eError.toString());
		}

		Lookup_Listener thread = new Lookup_Listener();
		thread.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        rbgSecurityType = new javax.swing.ButtonGroup();
        rbgFilterType = new javax.swing.ButtonGroup();
        lblDataSentToServer = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        lblCalls = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPuts = new javax.swing.JTextArea();
        lblPuts = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtSymbol = new javax.swing.JTextField();
        txtRequestID = new javax.swing.JTextField();
        btnGetSymbols = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCalls = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rbEquityOptions = new javax.swing.JRadioButton();
        rbFutureOptions = new javax.swing.JRadioButton();
        rbFutureSpreads = new javax.swing.JRadioButton();
        rbFutures = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cbxCalls = new javax.swing.JCheckBox();
        cbxPuts = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        spnStartingYear = new javax.swing.JSpinner();
        spnEndingYear = new javax.swing.JSpinner();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        cbxAll = new javax.swing.JCheckBox();
        cbxJan = new javax.swing.JCheckBox();
        cbxFeb = new javax.swing.JCheckBox();
        cbxMar = new javax.swing.JCheckBox();
        cbxApr = new javax.swing.JCheckBox();
        cbxMay = new javax.swing.JCheckBox();
        cbxJun = new javax.swing.JCheckBox();
        cbxSep = new javax.swing.JCheckBox();
        cbxJul = new javax.swing.JCheckBox();
        cbxAug = new javax.swing.JCheckBox();
        cbxDec = new javax.swing.JCheckBox();
        cbxOct = new javax.swing.JCheckBox();
        cbxNov = new javax.swing.JCheckBox();
        cbxNearMonths = new javax.swing.JCheckBox();
        cbxBinaryOptions = new javax.swing.JCheckBox();
        spnNearMonths = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        rbNoFilter = new javax.swing.JRadioButton();
        rbStrikeRangeFilter = new javax.swing.JRadioButton();
        rbInOutFilter = new javax.swing.JRadioButton();
        txtFromPriceFilter = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtToPriceFilter = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        spnContractsInTheMoney = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        spnContractsOutOfTheMoney = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDataSentToServer.setBackground(new java.awt.Color(204, 204, 204));
        lblDataSentToServer.setText("Message Sent : ");

        txtDisplay.setColumns(20);
        txtDisplay.setLineWrap(true);
        txtDisplay.setRows(5);
        jScrollPane1.setViewportView(txtDisplay);

        lblCalls.setText("Calls:");

        txtPuts.setColumns(20);
        txtPuts.setLineWrap(true);
        txtPuts.setRows(5);
        jScrollPane2.setViewportView(txtPuts);

        lblPuts.setText("Puts:");

        jLabel3.setText("Symbol:");

        jLabel4.setText("Request ID:");

        btnGetSymbols.setText("Get Symbols");
        btnGetSymbols.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnGetSymbolsActionPerformed(evt);
            }
        });

        txtCalls.setColumns(20);
        txtCalls.setLineWrap(true);
        txtCalls.setRows(5);
        jScrollPane3.setViewportView(txtCalls);
        jScrollPane3.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jLabel5.setText("Raw Data Returned:");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Lookup Criteria");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rbgSecurityType.add(rbEquityOptions);
        rbEquityOptions.setSelected(true);
        rbEquityOptions.setText("Equity Options");
        rbEquityOptions.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rbEquityOptionsActionPerformed(evt);
            }
        });

        rbgSecurityType.add(rbFutureOptions);
        rbFutureOptions.setText("Future Options");
        rbFutureOptions.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rbFutureOptionsActionPerformed(evt);
            }
        });

        rbgSecurityType.add(rbFutureSpreads);
        rbFutureSpreads.setText("Future Spreads");
        rbFutureSpreads.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rbFutureSpreadsActionPerformed(evt);
            }
        });

        rbgSecurityType.add(rbFutures);
        rbFutures.setText("Futures");
        rbFutures.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rbFuturesActionPerformed(evt);
            }
        });

        jLabel7.setText("Generate");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(rbEquityOptions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbFutures)
                        .addGap(18, 18, 18)
                        .addComponent(rbFutureSpreads)
                        .addGap(3, 3, 3)
                        .addComponent(rbFutureOptions)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEquityOptions)
                    .addComponent(rbFutures)
                    .addComponent(rbFutureSpreads)
                    .addComponent(rbFutureOptions))
                .addGap(60, 60, 60))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setText("Type");

        cbxCalls.setSelected(true);
        cbxCalls.setText("Calls");
        cbxCalls.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbxCallsActionPerformed(evt);
            }
        });

        cbxPuts.setSelected(true);
        cbxPuts.setText("Puts");
        cbxPuts.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbxPutsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(cbxCalls)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxPuts)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxCalls)
                    .addComponent(cbxPuts))
                .addGap(0, 27, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setText("Expiration Year");

        jLabel10.setText("Starting Year");

        jLabel11.setText("Ending Year");

        spnStartingYear.setModel(new javax.swing.SpinnerNumberModel(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.YEAR)+10, 1));
        spnStartingYear.setEditor(new javax.swing.JSpinner.NumberEditor(spnStartingYear, "0000"));
        spnStartingYear.setEnabled(false);

        spnEndingYear.setModel(new javax.swing.SpinnerNumberModel(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.YEAR)+10, 1));
        spnEndingYear.setEditor(new javax.swing.JSpinner.NumberEditor(spnEndingYear, "0000"));
        spnEndingYear.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnStartingYear)
                    .addComponent(spnEndingYear))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(spnStartingYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11)
                    .addComponent(spnEndingYear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setText("Expiration Months");

        cbxAll.setSelected(true);
        cbxAll.setText("All");
        cbxAll.setPreferredSize(new java.awt.Dimension(45, 30));
        cbxAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbxAllActionPerformed(evt);
            }
        });

        cbxJan.setSelected(true);
        cbxJan.setText("Jan");
        cbxJan.setEnabled(false);
        cbxJan.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxFeb.setSelected(true);
        cbxFeb.setText("Feb");
        cbxFeb.setEnabled(false);
        cbxFeb.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxMar.setSelected(true);
        cbxMar.setText("Mar");
        cbxMar.setEnabled(false);
        cbxMar.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxApr.setSelected(true);
        cbxApr.setText("Apr");
        cbxApr.setEnabled(false);
        cbxApr.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxMay.setSelected(true);
        cbxMay.setText("May");
        cbxMay.setEnabled(false);
        cbxMay.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxJun.setSelected(true);
        cbxJun.setText("Jun");
        cbxJun.setEnabled(false);
        cbxJun.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxSep.setSelected(true);
        cbxSep.setText("Sep");
        cbxSep.setEnabled(false);
        cbxSep.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxJul.setSelected(true);
        cbxJul.setText("Jul");
        cbxJul.setEnabled(false);
        cbxJul.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxAug.setSelected(true);
        cbxAug.setText("Aug");
        cbxAug.setEnabled(false);
        cbxAug.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxDec.setSelected(true);
        cbxDec.setText("Dec");
        cbxDec.setEnabled(false);
        cbxDec.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxOct.setSelected(true);
        cbxOct.setText("Oct");
        cbxOct.setEnabled(false);
        cbxOct.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxNov.setSelected(true);
        cbxNov.setText("Nov");
        cbxNov.setEnabled(false);
        cbxNov.setPreferredSize(new java.awt.Dimension(45, 30));

        cbxNearMonths.setText("Near Months");
        cbxNearMonths.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbxNearMonthsActionPerformed(evt);
            }
        });

        cbxBinaryOptions.setSelected(true);
        cbxBinaryOptions.setText("Remove Binary Options");

        spnNearMonths.setModel(new javax.swing.SpinnerNumberModel(0, 0, 4, 1));

        jLabel13.setText("Number of Near Months");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(cbxAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxMay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxSep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxJun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxOct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxJul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxNov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxAug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxDec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(cbxJan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxFeb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxMar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxApr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxBinaryOptions)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(cbxNearMonths)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnNearMonths, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 40, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxApr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxFeb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxJan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxAug, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxJul, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxJun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxDec, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxNov, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxOct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxSep, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxNearMonths)
                    .addComponent(jLabel13)
                    .addComponent(spnNearMonths, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxBinaryOptions)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setText("Filters");

        rbgFilterType.add(rbNoFilter);
        rbNoFilter.setSelected(true);
        rbNoFilter.setText("No filter");
        rbNoFilter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rbNoFilterActionPerformed(evt);
            }
        });

        rbgFilterType.add(rbStrikeRangeFilter);
        rbStrikeRangeFilter.setText("Strike Range");
        rbStrikeRangeFilter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rbStrikeRangeFilterActionPerformed(evt);
            }
        });

        rbgFilterType.add(rbInOutFilter);
        rbInOutFilter.setText("In/Out of the Money");
        rbInOutFilter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rbInOutFilterActionPerformed(evt);
            }
        });

        txtFromPriceFilter.setEnabled(false);

        jLabel15.setText("From");

        txtToPriceFilter.setEnabled(false);

        jLabel16.setText("To");

        jLabel17.setText("Number of in the money contracts");

        spnContractsInTheMoney.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        spnContractsInTheMoney.setEnabled(false);

        jLabel18.setText("Number of out of the money contracts");

        spnContractsOutOfTheMoney.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        spnContractsOutOfTheMoney.setEnabled(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(rbStrikeRangeFilter)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFromPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtToPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbNoFilter)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(rbInOutFilter)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel17))
                                    .addComponent(jLabel18))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(spnContractsInTheMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spnContractsOutOfTheMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbNoFilter)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbStrikeRangeFilter)
                            .addComponent(jLabel15)
                            .addComponent(txtFromPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtToPriceFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbInOutFilter)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spnContractsInTheMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(spnContractsOutOfTheMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDataSentToServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCalls, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2)
                                    .addComponent(lblPuts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 1, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSymbol, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(txtRequestID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGetSymbols, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGetSymbols))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDataSentToServer, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCalls)
                            .addComponent(lblPuts))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//-----------------------------------------------------------
	// void cbxAllActionPerformed(java.awt.event.ActionEvent evt)  
		/**
		 * Notes: If someone sets this checkbox, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the checkbox in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void cbxAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbxAllActionPerformed
    {//GEN-HEADEREND:event_cbxAllActionPerformed
		if (cbxAll.isSelected())
		{
			cbxJan.setSelected(true);
			cbxFeb.setSelected(true);
			cbxMar.setSelected(true);
			cbxApr.setSelected(true);
			cbxMay.setSelected(true);
			cbxJun.setSelected(true);
			cbxJul.setSelected(true);
			cbxAug.setSelected(true);
			cbxSep.setSelected(true);
			cbxOct.setSelected(true);
			cbxNov.setSelected(true);
			cbxDec.setSelected(true);
			cbxNearMonths.setSelected(false);
			spnNearMonths.setValue(0);
			cbxJan.setEnabled(false);
			cbxFeb.setEnabled(false);
			cbxMar.setEnabled(false);
			cbxApr.setEnabled(false);
			cbxMay.setEnabled(false);
			cbxJun.setEnabled(false);
			cbxJul.setEnabled(false);
			cbxAug.setEnabled(false);
			cbxSep.setEnabled(false);
			cbxOct.setEnabled(false);
			cbxNov.setEnabled(false);
			cbxDec.setEnabled(false);
		}
		else
		{
			cbxJan.setSelected(false);
			cbxFeb.setSelected(false);
			cbxMar.setSelected(false);
			cbxApr.setSelected(false);
			cbxMay.setSelected(false);
			cbxJun.setSelected(false);
			cbxJul.setSelected(false);
			cbxAug.setSelected(false);
			cbxSep.setSelected(false);
			cbxOct.setSelected(false);
			cbxNov.setSelected(false);
			cbxDec.setSelected(false);

			cbxJan.setEnabled(true);
			cbxFeb.setEnabled(true);
			cbxMar.setEnabled(true);
			cbxApr.setEnabled(true);
			cbxMay.setEnabled(true);
			cbxJun.setEnabled(true);
			cbxJul.setEnabled(true);
			cbxAug.setEnabled(true);
			cbxSep.setEnabled(true);
			cbxOct.setEnabled(true);
			cbxNov.setEnabled(true);
			cbxDec.setEnabled(true);
		}
		
    }//GEN-LAST:event_cbxAllActionPerformed
//-----------------------------------------------------------
	// void rbFuturesActionPerformed(java.awt.event.ActionEvent evt) 
		/**
		 * Notes: If someone sets this radio button, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the radio button in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void rbFuturesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbFuturesActionPerformed
    {//GEN-HEADEREND:event_rbFuturesActionPerformed
		lblCalls.setText("Futures:");
		txtCalls.setText("");
		txtPuts.setText("");
		lblPuts.setVisible(false);
		txtPuts.setVisible(false);
		cbxCalls.setEnabled(false);
		cbxPuts.setEnabled(false);
		cbxBinaryOptions.setEnabled(false);
		rbNoFilter.setSelected(true);
		rbNoFilter.setEnabled(false);
		rbInOutFilter.setEnabled(false);
		rbStrikeRangeFilter.setEnabled(false);
		spnStartingYear.setEnabled(true);
		spnEndingYear.setEnabled(true);
		txtFromPriceFilter.setEnabled(false);
		txtToPriceFilter.setEnabled(false);
		spnContractsInTheMoney.setEnabled(false);
		spnContractsOutOfTheMoney.setEnabled(false);
    }//GEN-LAST:event_rbFuturesActionPerformed
//-----------------------------------------------------------
	// void rbFutureSpreadsActionPerformed(java.awt.event.ActionEvent evt)
		/**
		 * Notes: If someone sets this radio button, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the radio button in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void rbFutureSpreadsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbFutureSpreadsActionPerformed
    {//GEN-HEADEREND:event_rbFutureSpreadsActionPerformed
		lblCalls.setText("Future Spreads:");
		txtCalls.setText("");
		txtPuts.setText("");
		lblPuts.setVisible(false);
		txtPuts.setVisible(false);	
		cbxCalls.setEnabled(true);
		cbxPuts.setEnabled(true);
		cbxBinaryOptions.setEnabled(false);
		rbNoFilter.setSelected(true);
		rbNoFilter.setEnabled(false);
		rbInOutFilter.setEnabled(false);
		rbStrikeRangeFilter.setEnabled(false);
		spnContractsInTheMoney.setEnabled(false);
		spnContractsOutOfTheMoney.setEnabled(false);
		txtFromPriceFilter.setEnabled(false);
		txtToPriceFilter.setEnabled(false);
		spnStartingYear.setEnabled(true);
		spnEndingYear.setEnabled(true);
    }//GEN-LAST:event_rbFutureSpreadsActionPerformed
//-----------------------------------------------------------
	// void rbFutureOptionsActionPerformed(java.awt.event.ActionEvent evt)
		/**
		 * Notes: If someone sets this radio button, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the radio button in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void rbFutureOptionsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbFutureOptionsActionPerformed
    {//GEN-HEADEREND:event_rbFutureOptionsActionPerformed
		lblCalls.setText("Calls:");
		lblPuts.setText("Puts:");
		txtCalls.setText("");
		txtPuts.setText("");
		lblCalls.setVisible(true);
		lblPuts.setVisible(true);
		txtCalls.setVisible(true);
		txtPuts.setVisible(true);	
		cbxCalls.setEnabled(true);
		cbxPuts.setEnabled(true);
		cbxBinaryOptions.setEnabled(false);
		rbNoFilter.setSelected(true);
		rbNoFilter.setEnabled(false);
		rbInOutFilter.setEnabled(false);
		rbStrikeRangeFilter.setEnabled(false);
		spnContractsInTheMoney.setEnabled(false);
		spnContractsOutOfTheMoney.setEnabled(false);
		txtFromPriceFilter.setEnabled(false);
		txtToPriceFilter.setEnabled(false);
		spnStartingYear.setEnabled(true);
		spnEndingYear.setEnabled(true);
    }//GEN-LAST:event_rbFutureOptionsActionPerformed
//-----------------------------------------------------------
	// void rbEquityOptionsActionPerformed(java.awt.event.ActionEvent evt)
		/**
		 * Notes: If someone sets this radio button, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the radio button in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void rbEquityOptionsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbEquityOptionsActionPerformed
    {//GEN-HEADEREND:event_rbEquityOptionsActionPerformed
		lblCalls.setText("Calls:");
		lblPuts.setText("Puts:");
		txtCalls.setText("");
		txtPuts.setText("");
		lblCalls.setVisible(true);
		lblPuts.setVisible(true);
		txtCalls.setVisible(true);
		txtPuts.setVisible(true);		
		cbxNearMonths.setEnabled(true);
		cbxCalls.setEnabled(true);
		cbxPuts.setEnabled(true);
		cbxBinaryOptions.setEnabled(true);
		rbNoFilter.setSelected(true);
		rbNoFilter.setEnabled(true);
		rbInOutFilter.setEnabled(true);
		rbStrikeRangeFilter.setEnabled(true);
		spnStartingYear.setEnabled(false);
		spnEndingYear.setEnabled(false);
    }//GEN-LAST:event_rbEquityOptionsActionPerformed
//-----------------------------------------------------------
	// void rbNoFilterActionPerformed(java.awt.event.ActionEvent evt)  
		/**
		 * Notes: If someone sets this radio button, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the radio button in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void rbNoFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbNoFilterActionPerformed
    {//GEN-HEADEREND:event_rbNoFilterActionPerformed
		txtFromPriceFilter.setEnabled(false);
		txtToPriceFilter.setEnabled(false);
		spnContractsInTheMoney.setEnabled(false);
		spnContractsOutOfTheMoney.setEnabled(false);
    }//GEN-LAST:event_rbNoFilterActionPerformed
//-----------------------------------------------------------
	// void rbStrikeRangeFilterActionPerformed(java.awt.event.ActionEvent evt) 
		/**
		 * Notes:
		 * @param 
		 * @return
		 */
	//-------------------------------------------------------
    private void rbStrikeRangeFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbStrikeRangeFilterActionPerformed
    {//GEN-HEADEREND:event_rbStrikeRangeFilterActionPerformed
		txtFromPriceFilter.setEnabled(true);
		txtToPriceFilter.setEnabled(true);
		spnContractsInTheMoney.setEnabled(false);
		spnContractsOutOfTheMoney.setEnabled(false);        // TODO add your handling code here:
    }//GEN-LAST:event_rbStrikeRangeFilterActionPerformed
//-----------------------------------------------------------
	// void rbInOutFilterActionPerformed(java.awt.event.ActionEvent evt)
		/**
		 * Notes: If someone sets this radio button, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the radio button in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void rbInOutFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rbInOutFilterActionPerformed
    {//GEN-HEADEREND:event_rbInOutFilterActionPerformed
		txtFromPriceFilter.setEnabled(false);
		txtToPriceFilter.setEnabled(false);
		spnContractsInTheMoney.setEnabled(true);
		spnContractsOutOfTheMoney.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_rbInOutFilterActionPerformed
//-----------------------------------------------------------
	// void cbxNearMonthsActionPerformed(java.awt.event.ActionEvent evt) 
		/**
		 * Notes: If someone sets this checkbox, enable and disable other controls as is appropriate.
		 * @param: Windows event, clicking the checkbox in this case.
		 * @return: None
		 */
	//-------------------------------------------------------
    private void cbxNearMonthsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbxNearMonthsActionPerformed
    {//GEN-HEADEREND:event_cbxNearMonthsActionPerformed
		if (cbxNearMonths.isSelected())
		{
			cbxJan.setSelected(false);
			cbxFeb.setSelected(false);
			cbxMar.setSelected(false);
			cbxApr.setSelected(false);
			cbxMay.setSelected(false);
			cbxJun.setSelected(false);
			cbxJul.setSelected(false);
			cbxAug.setSelected(false);
			cbxSep.setSelected(false);
			cbxOct.setSelected(false);
			cbxNov.setSelected(false);
			cbxDec.setSelected(false);
			cbxAll.setSelected(false);
			cbxJan.setEnabled(false);
			cbxFeb.setEnabled(false);
			cbxMar.setEnabled(false);
			cbxApr.setEnabled(false);
			cbxMay.setEnabled(false);
			cbxJun.setEnabled(false);
			cbxJul.setEnabled(false);
			cbxAug.setEnabled(false);
			cbxSep.setEnabled(false);
			cbxOct.setEnabled(false);
			cbxNov.setEnabled(false);
			cbxDec.setEnabled(false);
			spnNearMonths.setValue(1);
		}
		else
		{
			spnNearMonths.setValue(0);
			cbxJan.setSelected(false);
			cbxFeb.setSelected(false);
			cbxMar.setSelected(false);
			cbxApr.setSelected(false);
			cbxMay.setSelected(false);
			cbxJun.setSelected(false);
			cbxJul.setSelected(false);
			cbxAug.setSelected(false);
			cbxSep.setSelected(false);
			cbxOct.setSelected(false);
			cbxNov.setSelected(false);
			cbxDec.setSelected(false);

			cbxJan.setEnabled(true);
			cbxFeb.setEnabled(true);
			cbxMar.setEnabled(true);
			cbxApr.setEnabled(true);
			cbxMay.setEnabled(true);
			cbxJun.setEnabled(true);
			cbxJul.setEnabled(true);
			cbxAug.setEnabled(true);
			cbxSep.setEnabled(true);
			cbxOct.setEnabled(true);
			cbxNov.setEnabled(true);
			cbxDec.setEnabled(true);
		}
    }//GEN-LAST:event_cbxNearMonthsActionPerformed
//-----------------------------------------------------------
	// void btnGetSymbolsActionPerformed(java.awt.event.ActionEvent evt) 
		/**
		 * Notes: Compile available fields into a command to be sent to the buffer
		 * @param Windows event, button click.
		 * @return None
		 */
	//-------------------------------------------------------
    private void btnGetSymbolsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnGetSymbolsActionPerformed
    {//GEN-HEADEREND:event_btnGetSymbolsActionPerformed
		// clear the listboxes before the next request is made.
		txtCalls.setText("");
		txtPuts.setText("");
		lblCalls.setText("");
		lblPuts.setText("");
		// validate a symbol was entered
		if (txtSymbol.getText().equals(""))
		{
			txtSymbol.setBackground(Color.red);
		}
		else
		{
			txtSymbol.setBackground(Color.white);
			// build and make request
			String sCommand = "";
			// I have manually added the following properties to the criteriaForm:
			//      security Type, FilterType, MonthCodes, NearMonths, Leaps, Years, Filter1, and Filter2
			//      To view how these properties are populated based upon user input, view criteria.cs
			if (rbEquityOptions.isSelected())
			{
				sCommand = String.format("CEO,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), PutsCalls(), MonthCodes(), spnNearMonths.getValue().toString(), toNumeralString(cbxBinaryOptions.isSelected()), FilterType(), Filter1(), Filter2(), txtRequestID.getText());
			}
			else if (rbFutures.isSelected())
			{
				sCommand = String.format("CFU,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), MonthCodes(), Years(), spnNearMonths.getValue().toString(), txtRequestID.getText());
			}
			else if (rbFutureOptions.isSelected())
			{
				sCommand = String.format("CFO,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), PutsCalls(), MonthCodes(), Years(), spnNearMonths.getValue().toString(), txtRequestID.getText());
			}
			else if (rbFutureSpreads.isSelected())
			{
				sCommand = String.format("CFS,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), MonthCodes(), Years(), spnNearMonths.getValue().toString(), txtRequestID.getText());
			}
			else
			{
				updateCommandLabelError("Error in command.\n%s", sCommand);
			}
			if (sCommand.length() > 0)
			{
				// send it to the feed via the socket
				sendMessage(sCommand);
				updateCommandLabelResult(sCommand);
			}
			
		}
    }//GEN-LAST:event_btnGetSymbolsActionPerformed

    private void cbxPutsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbxPutsActionPerformed
    {//GEN-HEADEREND:event_cbxPutsActionPerformed
		if(! cbxPuts.isSelected())
		{
			cbxCalls.setSelected(true);
		}
    }//GEN-LAST:event_cbxPutsActionPerformed

    private void cbxCallsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbxCallsActionPerformed
    {//GEN-HEADEREND:event_cbxCallsActionPerformed
        if(! cbxCalls.isSelected())
		{
			cbxPuts.setSelected(true);
		}
    }//GEN-LAST:event_cbxCallsActionPerformed

//-----------------------------------------------------------
	// void sendMessage(String sCommand) 

		/**
		 * Sends a command to the output stream for processing by the
		 *	Lookup_Listener class\thread.
		 *
		 * @param sCommand, a String with a full message ready to be sent to the
		 * server including carriage return and line feed. Example: "S,UNWATCH
		 * ALL\r\n"
		 */
	//-----------------------------------------------------------     
	void sendMessage(String sCommand)
	{
		try
		{
			
			txtDisplay.setText("");
			
			//Send the message and flush to be sure it is handled right away.
			C_LookupIQFeed_Socket.brBufferedWriter.write(sCommand);
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			//Label will show the actual string sent to the server.
			updateCommandLabelResult(sCommand);
		} catch (IOException eError)
		{
			updateCommandLabelError("Error:" + sCommand, eError.toString());
		}
	}
//-----------------------------------------------------------
//-----------------------------------------------------------
// void updateCommandLabelResult(String sCommand) 

	/**
	 * Displays a message to a user that identifies the full message being sent.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and line feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 */
//-----------------------------------------------------------  
	void updateCommandLabelResult(String sCommand)
	{
		lblDataSentToServer.setText("Message Sent: " + sCommand);
	}
//-----------------------------------------------------------
// void updateCommandLabelError(String sCommand, String sError) 

	/**
	 * Displays a message to a user that identifies the error that may have
	 * occured.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and line feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 * @param sError, a String passed from the exception object.
	 */
//-----------------------------------------------------------   
	void updateCommandLabelError(String sCommand, String sError)
    {
        String sErrorMessage = String.format("%s \n Error Message: %s",sCommand, sError);
        lblDataSentToServer.setText(sErrorMessage); 
    }    
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(OptionChainsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(OptionChainsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(OptionChainsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(OptionChainsSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
		
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new OptionChainsSocket().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetSymbols;
    private javax.swing.JCheckBox cbxAll;
    private javax.swing.JCheckBox cbxApr;
    private javax.swing.JCheckBox cbxAug;
    private javax.swing.JCheckBox cbxBinaryOptions;
    private javax.swing.JCheckBox cbxCalls;
    private javax.swing.JCheckBox cbxDec;
    private javax.swing.JCheckBox cbxFeb;
    private javax.swing.JCheckBox cbxJan;
    private javax.swing.JCheckBox cbxJul;
    private javax.swing.JCheckBox cbxJun;
    private javax.swing.JCheckBox cbxMar;
    private javax.swing.JCheckBox cbxMay;
    private javax.swing.JCheckBox cbxNearMonths;
    private javax.swing.JCheckBox cbxNov;
    private javax.swing.JCheckBox cbxOct;
    private javax.swing.JCheckBox cbxPuts;
    private javax.swing.JCheckBox cbxSep;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCalls;
    private javax.swing.JLabel lblDataSentToServer;
    private javax.swing.JLabel lblPuts;
    private javax.swing.JRadioButton rbEquityOptions;
    private javax.swing.JRadioButton rbFutureOptions;
    private javax.swing.JRadioButton rbFutureSpreads;
    private javax.swing.JRadioButton rbFutures;
    private javax.swing.JRadioButton rbInOutFilter;
    private javax.swing.JRadioButton rbNoFilter;
    private javax.swing.JRadioButton rbStrikeRangeFilter;
    private javax.swing.ButtonGroup rbgFilterType;
    private javax.swing.ButtonGroup rbgSecurityType;
    private javax.swing.JSpinner spnContractsInTheMoney;
    private javax.swing.JSpinner spnContractsOutOfTheMoney;
    private javax.swing.JSpinner spnEndingYear;
    private javax.swing.JSpinner spnNearMonths;
    private javax.swing.JSpinner spnStartingYear;
    private javax.swing.JTextArea txtCalls;
    private javax.swing.JTextArea txtDisplay;
    private javax.swing.JTextField txtFromPriceFilter;
    private javax.swing.JTextArea txtPuts;
    private javax.swing.JTextField txtRequestID;
    private javax.swing.JTextField txtSymbol;
    private javax.swing.JTextField txtToPriceFilter;
    // End of variables declaration//GEN-END:variables
 /******************************************************************
 ******************************************************************
 ******************************************************************/
//-----------------------------------------------------------
// void actionPerformed(ActionEvent e)
// void windowOpened(WindowEvent e)
// void windowClosing(WindowEvent e)
// void windowIconified(WindowEvent e)
// void windowDeiconified(WindowEvent e)
// void windowClosed(WindowEvent e)
// void windowActivated(WindowEvent e)
// void windowActivated(WindowEvent e)        
/**
 * These 8 Window's event functions are left effectively blank due to simplicity, but are required for compilation.
*/
//-----------------------------------------------------------
// Start of Window's events.
    @Override
    public void actionPerformed(ActionEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowOpened(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void windowActivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void windowDeactivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    //End of window's events
    /******************************************************************
    ******************************************************************
    ******************************************************************/
	
	    
    
    //Class to execute and listen to replies from the server.
    //I am displaying the data returned in this function for simplicity to the text Window.
    //Considerations for performance will be needed as this will not work for most normal usage.
    class Lookup_Listener extends Thread
    {
    //-----------------------------------------------------------
    // void run()
    /**
    */
    //  Notes:  Check for data on the socket, process it if it exists by displaying
    //          to the text window.
    //
    //-----------------------------------------------------------
            public void run()
            {
                    String line;
                    try
                    {
						//-----------------------------------------------------------
						// void Process messages received and display calls and puts in seperate text fields
						// display counts and raw data for troubleshooting aids. Be sure to handle requestID, if sent, 
						// and any trailing commas that could throw counts off it.
						//-------------------------------------------------------
                            while ((line = C_LookupIQFeed_Socket.brBufferedReader.readLine()) != null)
                            {
									//Display the raw data
                                    txtDisplay.append(line + "\n");
									//Parse the data for individual display.
									if (line.contains(":"))
									{
										//txtDisplay.append(String.format("Total Fields Returned: (%d)",line.split(",").length));
										//Data is sent as call1,call2,call3,:,put1,put2,put3,
										//So we need the location of the colon to determine where to split the string.
										int iColonLocation = line.indexOf(":");
										int iStartLocation = 0;
										if (txtRequestID.getText().length() > 0)
										{
											//Set counter to just after the first comma if a RequestID was sent.
											iStartLocation = line.indexOf(",")+1;
										}
										if(line.substring(iStartLocation,iColonLocation).length() > 0)
										{
											lblCalls.setText(String.format("Calls: (%d)",line.substring(iStartLocation, iColonLocation).split(",").length));
										}
										else
										{
											lblCalls.setText(String.format("Calls: (%d)",line.substring(iStartLocation, iColonLocation).split(",").length-1));
										}
										//Split the calls and display
										for (String each : line.substring(iStartLocation, iColonLocation).split(","))
										{
											txtCalls.append(each+"\n");
										}
										//Decrement length by 1 to handle a trailing comma, iColonLocation+2 so we move past the : and following ,
										//Split the puts and display
										if(line.substring(iColonLocation).length() > 1)
										{
											for (String each : line.substring(iColonLocation+2).split(","))
											{
												txtPuts.append(each+"\n");
												lblPuts.setText(String.format("Puts: (%d)",line.substring(iColonLocation+2).split(",").length-1) );
											}
										}
										else
										{
											lblPuts.setText(String.format("Puts: (0)"));
										}
										
										
									}
									else if (line.startsWith("E,") || line.startsWith(txtRequestID.getText()+",E,") || line.contains("grep") || line.contains("PROTOCOL") || line.contains("ENDMSG"))
									{
										//An error was found, just print to txtDisplay.
										System.out.print(line);
									}
									
                                    else
									{
										//Futures and Futures spreads land here, display them in the calls window.
										lblCalls.setText("Contracts (" + line.split(",").length + ")");
										for (String each : line.split(","))
										{
											if(txtRequestID.getText().equals(each))
											{
												lblCalls.setText("Contracts (" + (line.split(",").length-1) + ")");
											}
											else
											{
												txtCalls.append(each+"\n");
											}
										}
									}
                            }
                    }
                    catch ( IOException eError) 
                    { 
                        updateCommandLabelError("Unable to read from socket.\n" , eError.toString());
                    }
            }
    }
	//-----------------------------------------------------------
	// String GetFutureMonthCodes()
	/**
	 * Notes:Returns all months if all is checked, otherwise compile by month.
	 * @param None
	 * @return A String of the Future Months that are selected.
	 */
	//-------------------------------------------------------
	private String GetFutureMonthCodes()
	{
		String sReturn = "";
		if (cbxAll.isSelected())
		{
			sReturn = "FGHJKMNQUVXZ";
		}
		else
		{
			if (cbxJan.isSelected())
			{
				sReturn = "F";
			}
			if (cbxFeb.isSelected())
			{
				sReturn += "G";
			}
			if (cbxMar.isSelected())
			{
				sReturn += "H";
			}
			if (cbxApr.isSelected())
			{
				sReturn += "J";
			}
			if (cbxMay.isSelected())
			{
				sReturn += "K";
			}
			if (cbxJun.isSelected())
			{
				sReturn += "M";
			}
			if (cbxJul.isSelected())
			{
				sReturn += "N";
			}
			if (cbxAug.isSelected())
			{
				sReturn += "Q";
			}
			if (cbxSep.isSelected())
			{
				sReturn += "U";
			}
			if (cbxOct.isSelected())
			{
				sReturn += "V";
			}
			if (cbxNov.isSelected())
			{
				sReturn += "X";
			}
			if (cbxDec.isSelected())
			{
				sReturn += "Z";
			}
		}
		return sReturn;
	}


	//-----------------------------------------------------------
	// String GetEquityPutMonthCodes()
		/**
		 * Notes:Function that returns the MonthCode string based upon which months are checked
		 * @param: None
		 * @return: A String of the Equity Put Months that are selected
		 */
	//-------------------------------------------------------
	private String GetEquityPutMonthCodes()
	{
		String sReturn = "";
		if (cbxAll.isSelected())
		{
			sReturn = "MNOPQRSTUVWX";
		}
		else
		{
			if (cbxJan.isSelected())
			{
				sReturn = "M";
			}
			if (cbxFeb.isSelected())
			{
				sReturn += "N";
			}
			if (cbxMar.isSelected())
			{
				sReturn += "O";
			}
			if (cbxApr.isSelected())
			{
				sReturn += "P";
			}
			if (cbxMay.isSelected())
			{
				sReturn += "Q";
			}
			if (cbxJun.isSelected())
			{
				sReturn += "R";
			}
			if (cbxJul.isSelected())
			{
				sReturn += "S";
			}
			if (cbxAug.isSelected())
			{
				sReturn += "T";
			}
			if (cbxSep.isSelected())
			{
				sReturn += "U";
			}
			if (cbxOct.isSelected())
			{
				sReturn += "V";
			}
			if (cbxNov.isSelected())
			{
				sReturn += "W";
			}
			if (cbxDec.isSelected())
			{
				sReturn += "X";
			}
		}
		return sReturn;
	}

	// String GetEquityCallMonthCodes()
		/**
		 * Notes:Function that returns the MonthCode string based upon which months are checked
		 * @param: None
		 * @return: A String of the Equity Call Months that are selected
		 */
	//-------------------------------------------------------
	private String GetEquityCallMonthCodes()
	{
		String sReturn = "";
		if (cbxAll.isSelected())
		{
			sReturn = "ABCDEFGHIJKL";
		}
		else
		{
			if (cbxJan.isSelected())
			{
				sReturn = "A";
			}
			if (cbxFeb.isSelected())
			{
				sReturn += "B";
			}
			if (cbxMar.isSelected())
			{
				sReturn += "C";
			}
			if (cbxApr.isSelected())
			{
				sReturn += "D";
			}
			if (cbxMay.isSelected())
			{
				sReturn += "E";
			}
			if (cbxJun.isSelected())
			{
				sReturn += "F";
			}
			if (cbxJul.isSelected())
			{
				sReturn += "G";
			}
			if (cbxAug.isSelected())
			{
				sReturn += "H";
			}
			if (cbxSep.isSelected())
			{
				sReturn += "I";
			}
			if (cbxOct.isSelected())
			{
				sReturn += "J";
			}
			if (cbxNov.isSelected())
			{
				sReturn += "K";
			}
			if (cbxDec.isSelected())
			{
				sReturn += "L";
			}
		}
		return sReturn;
	}
	//-----------------------------------------------------------
	// String PutsCalls()
		/**
		 * Notes: Returns p if selected, c if call is selected, or pc if both are.
		 * @param  : None
		 * @return: A string to match the note above.
		 */
	//-------------------------------------------------------
	public String PutsCalls()
	{
		String sReturn = "";
		if (cbxPuts.isSelected())
		{
			sReturn = "p";
		}
		if (cbxCalls.isSelected())
		{
			sReturn += "c";
		}
		return sReturn;
	}
	//-----------------------------------------------------------
	// String MonthCodes()
		/**
		 * Notes: This function checks for what security we are looking up and calls the 
		 * appropriate month calls and a final string is returned.
		 * @param: None
		 * @return: A string with all calls and/or puts indicated by the control properties. 
		 */
	//-------------------------------------------------------
	public String MonthCodes()
	{
			String sReturn = "";
			if (IsAnyIndividualMonthChecked())
			{
				if (rbEquityOptions.isSelected())
				{
					if (cbxPuts.isSelected())
					{
						sReturn += GetEquityPutMonthCodes();
					}
					if (cbxCalls.isSelected())
					{
						sReturn += GetEquityCallMonthCodes();
					}
				}
				else if (rbFutures.isSelected() || rbFutureOptions.isSelected() || rbFutureSpreads.isSelected())
				{
					sReturn += GetFutureMonthCodes();
				}
				else
				{
					sReturn = "Error";
				}                
			}
			return sReturn;
		
	}
	//-----------------------------------------------------------
	// boolean IsAnyIndividualMonthChecked()
		/**
		 * Notes: Checks to see if any month is checked at all.
		 * @param None
		 * @return: Returns true if Jan - Dec is checked, otherwise false.
		 */
	//-------------------------------------------------------
	private boolean IsAnyIndividualMonthChecked()
	{
		boolean bReturn = false;
		if (cbxJan.isSelected() || cbxFeb.isSelected() || cbxMar.isSelected() || cbxApr.isSelected()
			|| cbxMay.isSelected() || cbxJun.isSelected() || cbxJul.isSelected() || cbxAug.isSelected()
			|| cbxSep.isSelected() || cbxOct.isSelected() || cbxNov.isSelected() || cbxDec.isSelected())
		{
			bReturn = true;
		}
		return bReturn;
	}	

	//-----------------------------------------------------------
	// String Years()
		/**
		 * Notes: The years format is 1 digit with no spaces. So if the request was 2013 - 2015
		 * the returned string would be "345".
		 * @param 
		 * @return A string value comprised of the last digits of all years between StartingYear and EndingYear
		 */
	//-------------------------------------------------------
	public String Years()
	{
		String sReturn = "";
		if (spnStartingYear.isEnabled())
		{
			int i = 0;
			for (i = Integer.parseInt(spnStartingYear.getValue().toString()); i <= Integer.parseInt(spnEndingYear.getValue().toString()); i++)
			{
				String tempString = String.format("%d",i);
				sReturn += tempString.substring(3);
			}
			System.out.printf(sReturn);
		}
		return sReturn;
	}
	//-----------------------------------------------------------
	// String FilterType()
		/**
		 * Notes: Builds a string indication of what type of filter is requested.
		 * @param None
		 * @return: A string where 0 = No Filter, 1 = Strike Ranged filter, and 2 = an in and out of the money filter.
		 */
	//-------------------------------------------------------
        public String FilterType()
        {
                String sReturn = "0";
                if (rbStrikeRangeFilter.isSelected())
                {
                    sReturn = "1";
                }
                else if (rbInOutFilter.isSelected())
                {
                    sReturn = "2";
                }
                return sReturn;
        }
		//-----------------------------------------------------------
	// public String Filter1()
		/**
		 * Notes: The contents of this are based upon the filter type sent.
		 * @param: 
		 * @return: A string of 0 if no filter, txtFromPriceFilter value if by range,
		 * and spnContractsInTheMoney if by in and out of the money
		 */
	//-------------------------------------------------------
        public String Filter1()
        {
                String sReturn = "0.0";
                if (rbStrikeRangeFilter.isSelected())
                {
                    sReturn = txtFromPriceFilter.getText();
                }
                else if (rbInOutFilter.isSelected())
                {
                    sReturn = spnContractsInTheMoney.getValue().toString();
                }
                return sReturn;
        }
		//-----------------------------------------------------------
	// String Filter2()
		/**
		 * Notes: The contents of this are based upon the filter type sent.
		 * @param: 
		 * @return: A string of 0 if no filter, txtToPriceFilter value if by range,
		 * and spnContractsOutOfTheMoney if by in and out of the money
		 */
	//-------------------------------------------------------
        public String Filter2()
        {
                String sReturn = "0.0";
                if (rbStrikeRangeFilter.isSelected())
                {
                    sReturn = txtToPriceFilter.getText();
                }
                else if (rbInOutFilter.isSelected())
                {
                    sReturn = spnContractsOutOfTheMoney.getValue().toString();
                }
                return sReturn;
        }
		//-----------------------------------------------------------
	// String toNumeralString(final Boolean input) 
		/**
		 * Notes: Converts the true or false string return to "1" or "0".
		 * @param Boolean to be converted to string.
		 * @return: A string where true = 1 and false = 0
		 */
	//-------------------------------------------------------		
		public static String toNumeralString(final Boolean input) 
		{
			return input.booleanValue() ? "1" : "0";
		}
}
