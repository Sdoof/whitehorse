//-----------------------------------------------------------
//-----------------------------------------------------------
//
//             System: IQFeed
//       Filename: HistorySocket.java
//
//-----------------------------------------------------------
//
//            Proprietary Software Product
//
//           Data Transmission Network Inc.
//           9110 West Dodge Road Suite 200
//               Omaha, Nebraska  68114
//
//    Copyright (c) by Data Transmission Network 2008
//                 All Rights Reserved
//
//
//-----------------------------------------------------------
// Module Description: This file illustrates how to return various 
//         References: None
//           IDE: Netbeans 7.4
//             Author: Tim Walter
//        Modified By: 
//
//-----------------------------------------------------------
// Website for API information: http://www.iqfeed.net/dev/
//-----------------------------------------------------------
/******************************************************************************
 * DISCLAIMER:  These apps are designed with simplicity in mind and are not 
 * designed for copy and paste development.  You will need to consider 
 * performance enhancements based upon your own needs and implement your
 * solution accordingly. They are a guide to get people started, nothing more.
 ******************************************************************************/

import java.io.*;
import javax.swing.*;
import java.awt.event.*;

public class HistorySocket extends javax.swing.JFrame implements ActionListener, WindowListener
{
    //Define variables for use throughout the code
    private int IQFEED_LOOKUP_PORT_DEFAULT = 9100;      //Defaults to 9100, adjustable in the registy.
	//IQFeed_Socket is defined in the common folder, effectively it is a socket with a buffered reader and writer added.
    IQFeed_Socket C_LookupIQFeed_Socket;
	/**
	 * Creates new form HistorySocket
	 */
	public HistorySocket()
	{
		super("History Socket");
		initComponents();
		C_LookupIQFeed_Socket = new IQFeed_Socket();
                Java_Config config = new Java_Config();

		//Attempt to connect our socket
		
		System.out.println("Connecting to Lookup port.");
		// requests a socket connection to localhost on port IQFEED_LOOKUP_PORT_DEFAULT, default = localhost and port 9100
		// Port 9100 is configurable in the registry.  See registry settings in the documentation.
		// If False is returned we are not able to connect display an error and exit. 
		if (!C_LookupIQFeed_Socket.ConnectSocket(IQFEED_LOOKUP_PORT_DEFAULT))
		{
			JOptionPane.showMessageDialog(null, "Did you forget to login first?\nTake a look at the LaunchingTheFeed example app.");
			System.exit(1);
		}

		System.out.println("Connected to Lookup port.");
		C_LookupIQFeed_Socket.CreateBuffers();

		//Initialize the protocol, this prepares us for commands to come and verifies that our socket is working as intended.
		try
		{
			C_LookupIQFeed_Socket.brBufferedWriter.write(String.format("S,SET PROTOCOL,%s\r\n",config.most_recent_protocol));
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			updateCommandLabelResult(String.format("S,SET PROTOCOL,%s\r\n",config.most_recent_protocol));
		} catch (Exception eError)
		{
			updateCommandLabelError("Error writing to socket.\n%s", eError.toString());
		}

		Lookup_Listener thread = new Lookup_Listener();
		thread.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        bgIntervalGroup = new javax.swing.ButtonGroup();
        lblDataSentToServer = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        cbHistoryRequestType = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSymbol = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDatapoints = new javax.swing.JTextField();
        txtDays = new javax.swing.JTextField();
        txtInterval = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtBeginDateTime = new javax.swing.JTextField();
        txtEndDateTime = new javax.swing.JTextField();
        txtBeginFilterTime = new javax.swing.JTextField();
        txtEndFilterTime = new javax.swing.JTextField();
        txtDatapointsPerSend = new javax.swing.JTextField();
        txtDirection = new javax.swing.JTextField();
        txtRequestID = new javax.swing.JTextField();
        rbIntervalTime = new javax.swing.JRadioButton();
        rbIntervalVolume = new javax.swing.JRadioButton();
        rbIntervalTick = new javax.swing.JRadioButton();
        btnGetData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDataSentToServer.setText("Message Sent : ");

        txtDisplay.setColumns(20);
        txtDisplay.setRows(5);
        jScrollPane1.setViewportView(txtDisplay);

        cbHistoryRequestType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tick Datapoints", "Tick Days", "Tick Timeframe", "Interval Datapoints", "Interval Days", "Interval Timeframe", "Daily Datapoints", "Daily Timeframe", "Weekly Datapoints", "Monthly Datapoints" }));
        cbHistoryRequestType.setSelectedItem(0);
        cbHistoryRequestType.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbHistoryRequestTypeActionPerformed(evt);
            }
        });

        jLabel1.setText("Type:");

        jLabel2.setText("Symbol:");

        jLabel3.setText("Datapoints");

        jLabel4.setText("Days");

        jLabel5.setText("Interval");

        jLabel6.setText("Interval Type");

        jLabel7.setText("Begin Date Time");

        jLabel8.setText("End Date Time");

        jLabel9.setText("Begin Filter Time");

        jLabel10.setText("End Filter Time");

        jLabel11.setText("Datapoints Per Send");

        jLabel12.setText("Direction");

        jLabel13.setText("RequestID");

        bgIntervalGroup.add(rbIntervalTime);
        rbIntervalTime.setSelected(true);
        rbIntervalTime.setText("Time");
        rbIntervalTime.setEnabled(false);

        bgIntervalGroup.add(rbIntervalVolume);
        rbIntervalVolume.setText("Volume");
        rbIntervalVolume.setEnabled(false);

        bgIntervalGroup.add(rbIntervalTick);
        rbIntervalTick.setText("Tick");
        rbIntervalTick.setEnabled(false);

        btnGetData.setText("Get Data");
        btnGetData.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnGetDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDataSentToServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbHistoryRequestType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDatapoints))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(100, 100, 100)
                                .addComponent(jLabel2)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtDays, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbIntervalTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbIntervalVolume)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbIntervalTick))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7)
                            .addComponent(txtBeginDateTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEndDateTime)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBeginFilterTime))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEndFilterTime))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(txtDatapointsPerSend))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDirection, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRequestID)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGetData, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbHistoryRequestType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDatapoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbIntervalTime)
                    .addComponent(rbIntervalVolume)
                    .addComponent(rbIntervalTick))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBeginDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEndDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBeginFilterTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEndFilterTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDatapointsPerSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDirection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDataSentToServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGetData)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBeginDateTime, txtBeginFilterTime, txtDatapointsPerSend, txtDirection, txtEndDateTime, txtEndFilterTime, txtRequestID});

        pack();
    }// </editor-fold>//GEN-END:initComponents
	//-----------------------------------------------------------	
	// void cbHistoryRequestTypeActionPerformed(java.awt.event.ActionEvent evt)  

		/**
		 * @param evt, a windows event for the selection of a combo box option.
		 * Notes: This function handles the enabling and disabling of various fields
		 */
	//----------------------------------------------------------- 
    private void cbHistoryRequestTypeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbHistoryRequestTypeActionPerformed
    {//GEN-HEADEREND:event_cbHistoryRequestTypeActionPerformed
        int selection = cbHistoryRequestType.getSelectedIndex();
		switch (selection)
		{
			case 0: //Tick Datapoints
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(false);		
				rbIntervalTime.setEnabled(false);		
				rbIntervalVolume.setEnabled(false);		
				rbIntervalTick.setEnabled(false);	
				txtBeginDateTime.setEnabled(false);		
				txtEndDateTime.setEnabled(false);		
				txtBeginFilterTime.setEnabled(false);		
				txtEndFilterTime.setEnabled(false);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);		
				break;
			case 1: //Tick Days
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(true);		
				txtInterval.setEnabled(false);		
				rbIntervalTime.setEnabled(false);		
				rbIntervalVolume.setEnabled(false);		
				rbIntervalTick.setEnabled(false);	
				txtBeginDateTime.setEnabled(false);		
				txtEndDateTime.setEnabled(false);		
				txtBeginFilterTime.setEnabled(true);		
				txtEndFilterTime.setEnabled(true);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);	
				break;
			case 2: //Tick Timeframe
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(false);		
				rbIntervalTime.setEnabled(false);		
				rbIntervalVolume.setEnabled(false);		
				rbIntervalTick.setEnabled(false);	
				txtBeginDateTime.setEnabled(true);		
				txtEndDateTime.setEnabled(true);		
				txtBeginFilterTime.setEnabled(true);		
				txtEndFilterTime.setEnabled(true);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);		
				break;	
			case 3: //Interval Datapoints
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(true);		
				rbIntervalTime.setEnabled(true);		
				rbIntervalVolume.setEnabled(true);		
				rbIntervalTick.setEnabled(true);	
				txtBeginDateTime.setEnabled(false);		
				txtEndDateTime.setEnabled(false);		
				txtBeginFilterTime.setEnabled(false);		
				txtEndFilterTime.setEnabled(false);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);	
				break;
			case 4://Interval Days
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(true);		
				txtInterval.setEnabled(true);		
				rbIntervalTime.setEnabled(true);		
				rbIntervalVolume.setEnabled(true);		
				rbIntervalTick.setEnabled(true);	
				txtBeginDateTime.setEnabled(false);		
				txtEndDateTime.setEnabled(false);		
				txtBeginFilterTime.setEnabled(true);		
				txtEndFilterTime.setEnabled(true);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);		
				break;		
			case 5://Interval Timeframe
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(true);		
				rbIntervalTime.setEnabled(true);		
				rbIntervalVolume.setEnabled(true);		
				rbIntervalTick.setEnabled(true);	
				txtBeginDateTime.setEnabled(true);		
				txtEndDateTime.setEnabled(true);		
				txtBeginFilterTime.setEnabled(true);		
				txtEndFilterTime.setEnabled(true);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);	
				break;
			case 6://Daily Datapoints
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(false);		
				rbIntervalTime.setEnabled(false);		
				rbIntervalVolume.setEnabled(false);		
				rbIntervalTick.setEnabled(false);	
				txtBeginDateTime.setEnabled(false);		
				txtEndDateTime.setEnabled(false);		
				txtBeginFilterTime.setEnabled(false);		
				txtEndFilterTime.setEnabled(false);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);		
				break;
			case 7://Daily Timeframe
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(false);		
				rbIntervalTime.setEnabled(false);		
				rbIntervalVolume.setEnabled(false);		
				rbIntervalTick.setEnabled(false);	
				txtBeginDateTime.setEnabled(true);		
				txtEndDateTime.setEnabled(true);		
				txtBeginFilterTime.setEnabled(false);		
				txtEndFilterTime.setEnabled(false);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);	
				break;
			case 8://Weekly Datapoints
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(false);		
				rbIntervalTime.setEnabled(false);		
				rbIntervalVolume.setEnabled(false);		
				rbIntervalTick.setEnabled(false);	
				txtBeginDateTime.setEnabled(true);		
				txtEndDateTime.setEnabled(true);		
				txtBeginFilterTime.setEnabled(false);		
				txtEndFilterTime.setEnabled(false);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);	
				break;			
			case 9: //Monthly Datapoints
				cbHistoryRequestType.setEnabled(true);
				txtSymbol.setEnabled(true);		
				txtDatapoints.setEnabled(true);		
				txtDays.setEnabled(false);		
				txtInterval.setEnabled(false);		
				rbIntervalTime.setEnabled(false);		
				rbIntervalVolume.setEnabled(false);		
				rbIntervalTick.setEnabled(false);	
				txtBeginDateTime.setEnabled(true);		
				txtEndDateTime.setEnabled(true);		
				txtBeginFilterTime.setEnabled(false);		
				txtEndFilterTime.setEnabled(false);		
				txtDatapointsPerSend.setEnabled(true);
				txtDirection.setEnabled(true);
				txtRequestID.setEnabled(true);		
				break;
	
		}
		
    }//GEN-LAST:event_cbHistoryRequestTypeActionPerformed
	//-----------------------------------------------------------	
	// void btnGetDataActionPerformed(java.awt.event.ActionEvent evt)  

		/**
		 *
		 * @param evt, windows event 
		 */
	//----------------------------------------------------------- 
    private void btnGetDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnGetDataActionPerformed
    {//GEN-HEADEREND:event_btnGetDataActionPerformed
           // clear previous request data
            String sCommand = "";
            txtDisplay.setText("");

            // format request string based upon user input
            if (cbHistoryRequestType.getSelectedItem() == "Tick Datapoints")
            {
                // request in the format:
                // HTX,SYMBOL,NUMDATAPOINTS,DIRECTION,REQUESTID,DATAPOINTSPERSEND<CR><LF>
                sCommand = String.format("HTX,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtDatapoints.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText());
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Tick Days"))
            {
                // request in the format:
                // HTD,SYMBOL,NUMDAYS,MAXDATAPOINTS,BEGINFILTERTIME,ENDFILTERTIME,DIRECTION,REQUESTID,DATAPOINTSPERSEND<CR><LF>
                sCommand = String.format("HTD,%s,%s,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtDays.getText(), txtDatapoints.getText(), txtBeginFilterTime.getText(), txtEndFilterTime.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText());
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Tick Timeframe"))
            {
                // request in the format:
                // HTT,SYMBOL,BEGINDATE BEGINTIME,ENDDATE ENDTIME,MAXDATAPOINTS,BEGINFILTERTIME,ENDFILTERTIME,DIRECTION,REQUESTID,DATAPOINTSPERSEND<CR><LF>
                sCommand = String.format("HTT,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtBeginDateTime.getText(), txtEndDateTime.getText(), txtDatapoints.getText(), txtBeginFilterTime.getText(), txtEndFilterTime.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText());
            }
            else if (cbHistoryRequestType.getSelectedItem() ==("Interval Datapoints"))
            {
                // validate interval type
                String sIntervalType = "s";
                if (rbIntervalVolume.isSelected())
                {
                    sIntervalType = "v";
                }
                else if (rbIntervalTick.isSelected())
                {
                    sIntervalType = "t";
                }

                // request in the format:
                // HIX,SYMBOL,INTERVAL,NUMDATAPOINTS,DIRECTION,REQUESTID,DATAPOINTSPERSEND,INTERVALTYPE<CR><LF>
                sCommand = String.format("HIX,%s,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtInterval.getText(), txtDatapoints.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText(), sIntervalType);
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Interval Days"))
            {
                // validate interval type
                String sIntervalType = "s";
                if (rbIntervalVolume.isSelected())
                {
                    sIntervalType = "v";
                }
                else if (rbIntervalTick.isSelected())
                {
                    sIntervalType = "t";
                }

                // request in the format:
                // HID,SYMBOL,INTERVAL,NUMDAYS,MAXDATAPOINTS,BEGINFILTERTIME,ENDFILTERTIME,DIRECTION,REQUESTID,DATAPOINTSPERSEND,INTERVALTYPE<CR><LF>
                sCommand = String.format("HID,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtInterval.getText(), txtDays.getText(), txtDatapoints.getText(), txtBeginFilterTime.getText(), txtEndFilterTime.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText(), sIntervalType);
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Interval Timeframe"))
            {
                // validate interval type
                String sIntervalType = "s";
                if (rbIntervalVolume.isSelected())
                {
                    sIntervalType = "v";
                }
                else if (rbIntervalTick.isSelected())
                {
                    sIntervalType = "t";
                }

                // request in the format:
                // HIT,SYMBOL,INTERVAL,BEGINDATE BEGINTIME,ENDDATE ENDTIME,MAXDATAPOINTS,BEGINFILTERTIME,ENDFILTERTIME,DIRECTION,REQUESTID,DATAPOINTSPERSEND,INTERVALTYPE<CR><LF>
                sCommand = String.format("HIT,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtInterval.getText(), txtBeginDateTime.getText(), txtEndDateTime.getText(), txtDatapoints.getText(), txtBeginFilterTime.getText(), txtEndFilterTime.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText(), sIntervalType);
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Daily Datapoints"))
            {
                // request in the format:
                // HDX,SYMBOL,NUMDATAPOINTS,DIRECTION,REQUESTID,DATAPOINTSPERSEND<CR><LF>
                sCommand = String.format("HDX,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtDatapoints.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText());
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Daily Timeframe"))
            {
                // request in the format:
                // HDT,SYMBOL,BEGINDATE,ENDDATE,MAXDATAPOINTS,DIRECTION,REQUESTID,DATAPOINTSPERSEND<CR><LF>
                sCommand = String.format("HDT,%s,%s,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtBeginDateTime.getText(), txtEndDateTime.getText(), txtDatapoints.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText());
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Weekly Datapoints"))
            {
                // request in the format:
                // HWX,SYMBOL,NUMDATAPOINTS,DIRECTION,REQUESTID,DATAPOINTSPERSEND<CR><LF>
                sCommand = String.format("HDX,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtDatapoints.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText());
            }
            else if (cbHistoryRequestType.getSelectedItem() == ("Monthly Datapoints"))
            {
                // request in the format:
                // HMX,SYMBOL,NUMDATAPOINTS,DIRECTION,REQUESTID,DATAPOINTSPERSEND<CR><LF>
                sCommand = String.format("HDX,%s,%s,%s,%s,%s\r\n", txtSymbol.getText(), txtDatapoints.getText(), txtDirection.getText(), txtRequestID.getText(), txtDatapointsPerSend.getText());
            }
            else
            {
                // something unexpected happened
                sCommand = "Error Processing Request.";
            }

            // verify we have formed a request string
			
            if (sCommand.startsWith("H"))
            {
				txtDisplay.setText("Retrieving Data: \n");
                // send it to the feed via the socket
                sendMessage(sCommand);
			}
			else
			{
			String sError = String.format("%s\r\nRequest type selected was: %s", sCommand, cbHistoryRequestType.getSelectedItem());
			updateCommandLabelError(sCommand,sError.toString());
			}    
			
    }//GEN-LAST:event_btnGetDataActionPerformed

	//-----------------------------------------------------------	
	// void sendMessage(String sCommand) 

		/**
		 * Sends a command to the output stream for processing by the
			Lookup_Listener class\thread.
		 *
		 * @param sCommand, a String with a full message ready to be sent to the
		 * server including carriage return and line feed. Example: "S,UNWATCH
		 * ALL\r\n"
		 */
	//-----------------------------------------------------------     
	void sendMessage(String sCommand)
	{
		try
		{
			//Send the message and flush to be sure it is handled right away.
			C_LookupIQFeed_Socket.brBufferedWriter.write(sCommand);
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			//Label will show the actual string sent to the server.
			updateCommandLabelResult(sCommand);
		} 
		catch (IOException eError)
		{
			updateCommandLabelError("Error:" + sCommand, eError.toString());
		}
	}
//-----------------------------------------------------------
//-----------------------------------------------------------
// void updateCommandLabelResult(String sCommand) 

	/**
	 * Displays a message to a user that identifies the full message being sent.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and line feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 */
//-----------------------------------------------------------  
	void updateCommandLabelResult(String sCommand)
	{
		lblDataSentToServer.setText("Message Sent: " + sCommand);
	}
//-----------------------------------------------------------
// void updateCommandLabelError(String sCommand, String sError) 

	/**
	 * Displays a message to a user that identifies the error that may have
	 * occurred.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and line feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 * @param sError, a String passed from the exception object.
	 */
//-----------------------------------------------------------   
	void updateCommandLabelError(String sCommand, String sError)
    {
        String sErrorMessage = String.format("%s \n Error Message: %s",sCommand, sError);
        lblDataSentToServer.setText(sErrorMessage); 
    }    
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(HistorySocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(HistorySocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(HistorySocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(HistorySocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
		
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new HistorySocket().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgIntervalGroup;
    private javax.swing.JButton btnGetData;
    private javax.swing.JComboBox cbHistoryRequestType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDataSentToServer;
    private javax.swing.JRadioButton rbIntervalTick;
    private javax.swing.JRadioButton rbIntervalTime;
    private javax.swing.JRadioButton rbIntervalVolume;
    private javax.swing.JTextField txtBeginDateTime;
    private javax.swing.JTextField txtBeginFilterTime;
    private javax.swing.JTextField txtDatapoints;
    private javax.swing.JTextField txtDatapointsPerSend;
    private javax.swing.JTextField txtDays;
    private javax.swing.JTextField txtDirection;
    private javax.swing.JTextArea txtDisplay;
    private javax.swing.JTextField txtEndDateTime;
    private javax.swing.JTextField txtEndFilterTime;
    private javax.swing.JTextField txtInterval;
    private javax.swing.JTextField txtRequestID;
    private javax.swing.JTextField txtSymbol;
    // End of variables declaration//GEN-END:variables
 /******************************************************************
 ******************************************************************
 ******************************************************************/
//-----------------------------------------------------------
// void actionPerformed(ActionEvent e)
// void windowOpened(WindowEvent e)
// void windowClosing(WindowEvent e)
// void windowIconified(WindowEvent e)
// void windowDeiconified(WindowEvent e)
// void windowClosed(WindowEvent e)
// void windowActivated(WindowEvent e)
// void windowActivated(WindowEvent e)        
/**
 * These 8 Window's event functions are left effectively blank due to simplicity, but are required for compilation.
*/
//-----------------------------------------------------------
// Start of Window's events.
    @Override
    public void actionPerformed(ActionEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowOpened(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void windowActivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void windowDeactivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    //End of window's events
    /******************************************************************
    ******************************************************************
    ******************************************************************/
	
	    
    
    //Class to execute and listen to replies from the server.
    //I am displaying the data returned in this function for simplicity to the text Window.
    //Considerations for performance will be needed as this will not work for most normal usage.
    class Lookup_Listener extends Thread
    {
    //-----------------------------------------------------------
    // void run()
    /**
    */
    //  Notes:  Check for data on the socket, process it if it exists by displaying
    //          to the text window.
    //
    //-----------------------------------------------------------
            public void run()
            {
                    String line;
                    try
                    {
                            while ((line = C_LookupIQFeed_Socket.brBufferedReader.readLine()) != null)
                            {
                                    System.out.println(line);
                                    txtDisplay.append(line + "\n");
                            }
                    }
                    catch (Exception eError) 
                    { 
                        updateCommandLabelError("Unable to read from socket.\n" , eError.toString());
                    }
            }
    }
}
