//-----------------------------------------------------------
//-----------------------------------------------------------
//
//             System: IQFeed
//       Filename: SymbolLookupSocket.java
//
//-----------------------------------------------------------
//
//            Proprietary Software Product
//
//           Data Transmission Network Inc.
//           9110 West Dodge Road Suite 200
//               Omaha, Nebraska  68114
//
//    Copyright (c) by Data Transmission Network 2008
//                 All Rights Reserved
//
//
//-----------------------------------------------------------
// Module Description: This file illustrates how to the valls and returns to the 
//						the Symbol Lookup port.
//         References: None
//           IDE: Netbeans 7.4
//             Author: Tim Walter
//        Modified By: 
//
//-----------------------------------------------------------
// Website for API information: http://www.iqfeed.net/dev/
//-----------------------------------------------------------
/******************************************************************************
 * DISCLAIMER:  These apps are designed with simplicity in mind and are not 
 * designed for copy and paste development.  You will need to consider 
 * performance enhancements based upon your own needs and implement your
 * solution accordingly. They are a guide to get people started, nothing more.
 ******************************************************************************/

import java.io.*;
import javax.swing.*;
import java.awt.event.*;

public class SymbolLookupSocket extends javax.swing.JFrame implements ActionListener, WindowListener
{
    //Define variables for use throughout the code
    private int IQFEED_LOOKUP_PORT_DEFAULT = 9100;      //Defaults to 9100, adjustable in the registy.
	//IQFeed_Socket is defined in the common folder, effectively it is a socket with a buffered reader and writer added.
    IQFeed_Socket C_LookupIQFeed_Socket;
	/**
	 * Creates new form SymbolLookupSocket
	 */
	public SymbolLookupSocket()
	{
		super("Symbol Lookup Socket");
		initComponents();
		C_LookupIQFeed_Socket = new IQFeed_Socket();

		//Attempt to connect our socket
		
		System.out.println("Connecting to Symbol Lookup port.");
			// requests a socket connection to localhost on port IQFEED_LOOKUP_PORT_DEFAULT, default = localhost and port 9100
		// Port 9100 is configurable in the registry.  See registry settings in the documentation.
		// If False is returned we are not able to connect display an error and exit. 
		if (!C_LookupIQFeed_Socket.ConnectSocket(IQFEED_LOOKUP_PORT_DEFAULT))
		{
			JOptionPane.showMessageDialog(null, "Did you forget to login first?\nTake a look at the LaunchingTheFeed example app.");
			System.exit(1);
		}

		System.out.println("Connected to Symbol Lookup port.");
		C_LookupIQFeed_Socket.CreateBuffers();

		//Initialize the protocol, this prepares us for commands to come and verifies that our socket is working as intended.
		try
		{
                        Java_Config config = new Java_Config();
			C_LookupIQFeed_Socket.brBufferedWriter.write(String.format("S,SET PROTOCOL,%s\r\n",config.most_recent_protocol));
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			System.out.println("Message Posted, Protocol set.");
		} catch (Exception eError)
		{
			updateCommandLabelError("Error writing to socket.\n%s", eError.toString());
		}

		Lookup_Listener thread = new Lookup_Listener();
		thread.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        bgSearchType = new javax.swing.ButtonGroup();
        bgFilterType = new javax.swing.ButtonGroup();
        lblDataSentToServer = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rbSymbol = new javax.swing.JRadioButton();
        rbDescription = new javax.swing.JRadioButton();
        rbSIC = new javax.swing.JRadioButton();
        rbNAICS = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        txtSearchString = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        rbListedMarkets = new javax.swing.JRadioButton();
        rbSecurityTypes = new javax.swing.JRadioButton();
        txtFilterValue = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtRequestID = new javax.swing.JTextField();
        btnGetData = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDataSentToServer.setText("Message Sent : ");

        txtDisplay.setColumns(20);
        txtDisplay.setRows(5);
        jScrollPane1.setViewportView(txtDisplay);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Field to Search");

        bgSearchType.add(rbSymbol);
        rbSymbol.setText("Symbol");

        bgSearchType.add(rbDescription);
        rbDescription.setText("Description");

        bgSearchType.add(rbSIC);
        rbSIC.setText("SIC");

        bgSearchType.add(rbNAICS);
        rbNAICS.setText("NAICS");

        jLabel5.setText("Search String");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchString)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rbSymbol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbDescription))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(rbSIC)
                                .addGap(18, 18, 18)
                                .addComponent(rbNAICS))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSymbol)
                    .addComponent(rbDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSIC)
                    .addComponent(rbNAICS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Filter By");

        bgFilterType.add(rbListedMarkets);
        rbListedMarkets.setText("Listed Markets");

        bgFilterType.add(rbSecurityTypes);
        rbSecurityTypes.setText("Security Types");

        jLabel4.setText("Filter Value");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rbListedMarkets)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbSecurityTypes))
                    .addComponent(txtFilterValue)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbListedMarkets)
                    .addComponent(rbSecurityTypes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFilterValue, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
        );

        jLabel6.setText("Request ID");

        btnGetData.setText("Get Data");
        btnGetData.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnGetDataActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(153, 153, 153));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("You may retrieve listings of current markets, security types, SIC codes, and NAICS codes from the System Info example.");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setAutoscrolls(false);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRequestID)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(btnGetData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane3)))
                    .addComponent(lblDataSentToServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnGetData, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDataSentToServer, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//-----------------------------------------------------------
	//void btnGetDataActionPerformed(java.awt.event.ActionEvent evt) 

		/**
		 * Builds the appropriate command given that correct information is 
		 * entered into the windows objects and passes that command to sendMessage 
		 * for processing.
		 * @param : Windows click event.
		 */
	//----------------------------------------------------------- 
    private void btnGetDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnGetDataActionPerformed
    {//GEN-HEADEREND:event_btnGetDataActionPerformed
           // clear the listbox before making the next request
            txtDisplay.setText("");

            String sCommand = "";

            // here we make the request for data to the feed via the socket based on user input
            if (rbSymbol.isSelected())
            {
                // if (Symbol.isSelected() in Search By Group box
                if (rbListedMarkets.isSelected())
                {
                    // if (Listed Market checked in Filter Group box
                    sCommand = String.format("SBF,s,%s,e,%s,%s\r\n", txtSearchString.getText(), txtFilterValue.getText(), txtRequestID.getText());
                }
                else if (rbSecurityTypes.isSelected())
                {
                    // if (Security Type checked in Filter Group Box
                    sCommand = String.format("SBF,s,%s,t,%s,%s\r\n", txtSearchString.getText(), txtFilterValue.getText(), txtRequestID.getText());
                }
                else
                {
                    // if (no filter checked in Filter Group Box
                    sCommand = String.format("SBF,s,%s,,,%s\r\n", txtSearchString.getText(), txtRequestID.getText());
                }
            }
            else if (rbDescription.isSelected())
            {
                // if (Description.isSelected() in Search By Group box
                if (rbListedMarkets.isSelected())
                {
                    // if (Listed Market checked in Filter Group box
                    sCommand = String.format("SBF,d,%s,e,%s,%s\r\n", txtSearchString.getText(), txtFilterValue.getText(), txtRequestID.getText());
                }
                else if (rbSecurityTypes.isSelected())
                {
                    // if (Security Type checked in Filter Group Box
                    sCommand = String.format("SBF,d,%s,t,%s,%s\r\n", txtSearchString.getText(), txtFilterValue.getText(), txtRequestID.getText());
                }
                else
                {
                    // if (no filter checked in Filter Group Box
                    sCommand = String.format("SBF,d,%s,,,%s\r\n", txtSearchString.getText(), txtRequestID.getText());
                }
            }
            else if (rbSIC.isSelected())
            {
                // if SIC.isSelected() in Search By Group box
                sCommand = String.format("SBS,%s,%s\r\n", txtSearchString.getText(), txtRequestID.getText());
            }
            else if (rbNAICS.isSelected())
            {
                // if NAICS.isSelected() in Search By Group box
                sCommand = String.format("SBN,%s,%s\r\n", txtSearchString.getText(), txtRequestID.getText());
            }

            if (sCommand.length() > 0)
            {
                // send it to the feed via the socket
                sendMessage(sCommand);
			}
	
    }//GEN-LAST:event_btnGetDataActionPerformed

//-----------------------------------------------------------
	// void sendMessage(String sCommand) 

		/**
		 * Sends a command to the output stream for processing by the
 Lookup_Listener class\thread.
		 *
		 * @param sCommand, a String with a full message ready to be sent to the
		 * server including carriage return and line feed. Example: "S,UNWATCH
		 * ALL\r\n"
		 */
	//-----------------------------------------------------------     
	void sendMessage(String sCommand)
	{
		try
		{
			//Send the message and flush to be sure it is handled right away.
			C_LookupIQFeed_Socket.brBufferedWriter.write(sCommand);
			C_LookupIQFeed_Socket.brBufferedWriter.flush();
			//Label will show the actual string sent to the server.
			updateCommandLabelResult(sCommand);
		} catch (IOException eError)
		{
			updateCommandLabelError("Error:" + sCommand, eError.toString());
		}
	}
//-----------------------------------------------------------
//-----------------------------------------------------------
// void updateCommandLabelResult(String sCommand) 

	/**
	 * Displays a message to a user that identifies the full message being sent.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and line feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 */
//-----------------------------------------------------------  
	void updateCommandLabelResult(String sCommand)
	{
		lblDataSentToServer.setText("Message Sent: " + sCommand);
	}
//-----------------------------------------------------------
// void updateCommandLabelError(String sCommand, String sError) 

	/**
	 * Displays a message to a user that identifies the error that may have
	 * occured.
	 *
	 * @param sCommand, a String with a full message ready to be sent to the
	 * server including carriage return and line feed. Example: "S,UNWATCH
	 * ALL\r\n"
	 * @param sError, a String passed from the exception object.
	 */
//-----------------------------------------------------------   
	void updateCommandLabelError(String sCommand, String sError)
    {
        String sErrorMessage = String.format("%s \n Error Message: %s",sCommand, sError);
        lblDataSentToServer.setText(sErrorMessage); 
    }    
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(SymbolLookupSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(SymbolLookupSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(SymbolLookupSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(SymbolLookupSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
		
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new SymbolLookupSocket().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgFilterType;
    private javax.swing.ButtonGroup bgSearchType;
    private javax.swing.JButton btnGetData;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblDataSentToServer;
    private javax.swing.JRadioButton rbDescription;
    private javax.swing.JRadioButton rbListedMarkets;
    private javax.swing.JRadioButton rbNAICS;
    private javax.swing.JRadioButton rbSIC;
    private javax.swing.JRadioButton rbSecurityTypes;
    private javax.swing.JRadioButton rbSymbol;
    private javax.swing.JTextArea txtDisplay;
    private javax.swing.JTextField txtFilterValue;
    private javax.swing.JTextField txtRequestID;
    private javax.swing.JTextField txtSearchString;
    // End of variables declaration//GEN-END:variables
 /******************************************************************
 ******************************************************************
 ******************************************************************/
//-----------------------------------------------------------
// void actionPerformed(ActionEvent e)
// void windowOpened(WindowEvent e)
// void windowClosing(WindowEvent e)
// void windowIconified(WindowEvent e)
// void windowDeiconified(WindowEvent e)
// void windowClosed(WindowEvent e)
// void windowActivated(WindowEvent e)
// void windowActivated(WindowEvent e)        
/**
 * These 8 Window's event functions are left effectively blank due to simplicity, but are required for compilation.
*/
//-----------------------------------------------------------
// Start of Window's events.
    @Override
    public void actionPerformed(ActionEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowOpened(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void windowActivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void windowDeactivated(WindowEvent e)
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    //End of window's events
    /******************************************************************
    ******************************************************************
    ******************************************************************/
	
	    
    
    //Class to execute and listen to replies from the server.
    //I am displaying the data returned in this function for simplicity to the text Window.
    //Considerations for performance will be needed as this will not work for most normal usage.
    class Lookup_Listener extends Thread
    {
    //-----------------------------------------------------------
    // void run()
    /**
    */
    //  Notes:  Check for data on the socket, process it if it exists by displaying
    //          to the text window.
    //
    //-----------------------------------------------------------
            public void run()
            {
                    String line;
                    try
                    {
                            while ((line = C_LookupIQFeed_Socket.brBufferedReader.readLine()) != null)
                            {
                                    System.out.println(line);
                                    txtDisplay.append(line + "\n");
                            }
                    }
                    catch (Exception eError) 
                    { 
                        updateCommandLabelError("Unable to read from socket.\n" , eError.toString());
                    }
            }
    }
}
